
// Документ Покупка Модуль Объекта
Процедура ОбработкаПроведения(Отказ, Режим)

	Сообщить("ОбработкаПроведения");
	
	// Проверка Усли Пустой Документ
	Если Продукты.Количество() = 0 Тогда  
		Сообщить("у документа нет строк");//Показать ошибку
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Установка флага сохранения в регистр Движения Продукты и Затраты
	Движения.Продукты.Записывать 	= Истина;   
	Движения.Затраты.Записывать 	= Истина;

	
	// Определение Запрос данных 
	Запрос = Новый Запрос; 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПокупкаПродукты.Продукт КАК Продукт,
		|	СУММА(ПокупкаПродукты.Количество) КАК Количество,
		|	СУММА(ПокупкаПродукты.Количество * ПокупкаПродукты.Цена) КАК Сумма
		|ИЗ
		|	Документ.Покупка.Продукты КАК ПокупкаПродукты
		|ГДЕ
		|	ПокупкаПродукты.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПокупкаПродукты.Продукт";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	// Формируем запись в регистр
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
		
		Движение 				= Движения.Продукты.Добавить();
		// Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
		Движение.Период 		= Дата;
		Движение.Продукт 		= ВыборкаДетальныеЗаписи.Продукт;
		Движение.Количество 	= ВыборкаДетальныеЗаписи.Количество;  
		Движение.Сумма 			= ВыборкаДетальныеЗаписи.Сумма;

	КонецЦикла; 
	
	// Запишем сумму в затраты          
	
	// СуммаДокумента = 1111;
	
	ДвижениеЗатрат = Движения.Затраты.Добавить();  
	// При проведении покупки ошибка: (если раскоммент след строку)
	//ДвижениеЗатрат.ВидДвижения = ВидДвиженияНакопления.Приход; 
	//Ошибка при выполнении обработчика - 'ОбработкаПроведения'
	//по причине:
	//Поле объекта недоступно для записи (ВидДвижения)
	//{Документ.Покупка.МодульОбъекта(53)}:ДвижениеЗатрат.ВидДвижения = ВидДвиженияНакопления.Приход;
	//[ОшибкаВоВремяВыполненияВстроенногоЯзыка, ОшибкаИспользованияВстроенногоЯзыка
	ДвижениеЗатрат.Период = Дата;
	ДвижениеЗатрат.Магазин = Магазин;
	ДвижениеЗатрат.Сумма = СуммаДокумента;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)  
	Сообщить("ПриЗаписи");

	// ПриЗаписи === ПослеЗаписи - Все равно сначала запись - а потом все остальное 
	//СуммаДокумента = 1111;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецПроцедуры                   	
	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Сообщить("ПередЗаписью");  
	// Реальный расчет:  
	
	//// Первый вариант расчета самый надежный но не единственный!!!
	СуммаДокумента = 0;   	
	Для каждого СтрокаДокумента Из Продукты Цикл   		
		СуммаДокумента = СуммаДокумента + (СтрокаДокумента.Цена * СтрокаДокумента.Количество)		
	КонецЦикла; 
	
	//// Второй вариант если была бы колонка Сумма по продукту
	//СуммаДокумента = Продукты.Итог("Сумма");     
	
	//// Третий вариант - через запрос . Но &Ссылка идет на Уже Записаный (существующий или пустой!!!) Перед Записью   	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	СУММА(ПокупкаПродукты.Количество * ПокупкаПродукты.Цена) КАК Сумма
	//	|ИЗ
	//	|	Документ.Покупка.Продукты КАК ПокупкаПродукты
	//	|ГДЕ
	//	|	ПокупкаПродукты.Ссылка = &Ссылка";
	//
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);                             
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	//	
	//	СуммаДокумента = ВыборкаДетальныеЗаписи.Сумма; 
	//	Сообщить( СуммаДокумента)
	//КонецЕсли;      
	
	
		
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	Сообщить("ПриУстановкеНовогоНомера");
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Сообщить("ПриКопировании");

	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Сообщить("ОбработкаЗаполнения");

	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	Сообщить("ПередУдалением");

	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Сообщить("ОбработкаУдаленияПроведения");

	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Сообщить("ОбработкаПроверкиЗаполнения");

	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ОбработкаФормированияПоВерсииИсторииДанных(ДанныеВерсии, НомерВерсии, ИсключитьДанные, СтандартнаяОбработка)
	Сообщить("ОбработкаФормированияПоВерсииИсторииДанных");

	// Вставить содержимое обработчика.
КонецПроцедуры



