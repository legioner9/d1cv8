
<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<title>1С-Предприятие. Документация | Web-расширение. Часть 1</title>
<link rel="stylesheet" type="text/css" href="../../../1c.css">
</head>
<body lang=RU link=#0000FF vlink=#800080 background="../../../images/background_main.gif">
<h1 class="highlink"><font size="4">Web-расширение. 
  Часть 1.</font></h1>
<hr>

  <p>&nbsp;</p>
  <p><a href="#_toc497074791"><b>Введение</b></a> </p>
  <ul>
    <li> 
      <a href="#_toc497074792">Структура описания</a></li>
  </ul>
<a href="#_toc497074793"><b>Интернет-технологии</b></a> 
  <ul>
    <li> 
      <a href="#_toc497074794">Общие понятия и термины</a></li>
    <li> 
      <a href="#_toc497074795">Web-серверы</a></li>
    <li> 
      <a href="#_toc497074796">Браузеры</a></li>
    <li> 
      <a href="#_toc497074797">Web-приложения</a></li>
  </ul>
<a href="#_toc497074798"><b>Web-приложения</b></a> 
  <ul>
    <li> 
      <a href="#_toc497074799">Область использования Web-приложений</a></li>
    <li> 
      <a href="#_toc497074800">Архитектура Web-приложений</a></li>
    <li> 
      <a href="#_toc497074801">Cookies</a></li>
    <li> 
      <a href="#_toc497074802">Построение Web-приложения</a></li>
  </ul>
<a href="#_toc497074803"><b>Серверные технологии</b></a> 
  <ul>
    <li> 
      <a href="#_toc497074804">Свойства браузеров</a></li>
    <li> 
      <a href="#_toc497074805">Интернет-магазины</a></li>
  </ul>
<a href="#_toc497074806"><b>Технология ASP</b></a> 
  <ul>
    <li> 
      <a href="#_toc497074807">ASP-страницы</a></li>
    <li> 
      <a href="#_toc497074808">Приложение</a></li>
    <li> 
      <a href="#_toc497074809">Пользовательские сессии</a></li>
    <li> 
      <a href="#_toc497074810">Объекты</a><ul>
        <li> 
          <a href="#_toc497074811">Request</a></li>
        <li> 
          <a href="#_toc497074812">Cookies</a></li>
        <li> 
          <a href="#_toc497074813">QueryString</a></li>
        <li> 
          <a href="#_toc497074814">ServerVariables</a></li>
        <li> 
          <a href="#_toc497074816">Response</a></li>
        <li> 
          <a href="#_toc497074817">Cookies</a></li>
        <li> 
          <a href="#_toc497074818">Buffer</a></li>
        <li> 
          <a href="#_toc497074819">Write</a></li>
        <li> 
           
            <a href="#_toc497074822">Clear</a></li>
        <li> 
          <a href="#_toc497074823">End</a></li>
        <li> 
          <a href="#_toc497074824">Flush</a></li>
        <li> 
          <a href="#_toc497074825">Redirect</a></li>
        <li> 
          <a href="#_toc497074826">Server</a></li>
        <li> 
          <a href="#_toc497074827">ScriptTimeout</a></li>
        <li> 
          <a href="#_toc497074828">CreateObject</a></li>
        <li> 
          <a href="#_toc497074829">URLEncode</a></li>
        <li> 
          <a href="#_toc497074830">MapPath</a></li>
        <li> 
          <a href="#_toc497074831">Session</a></li>
        <li> 
          <a href="#_toc497074832">SessionID</a></li>
        <li> 
          <a href="#_toc497074833">Timeout</a></li>
        <li> 
          <a href="#_toc497074834">Abandon</a></li>
        <li> 
          <a href="#_toc497074835">Value</a></li>
        <li> 
          <a href="#_toc497074836">Application</a></li>
        <li> 
          <a href="#_toc497074837">Lock</a></li>
        <li> 
          <a href="#_toc497074838">Unlock</a></li>
        <li> 
          <a href="#_toc497074839">Value</a></li>
      </ul>
    </li>
  </ul>
<br
clear=all style='page-break-before:always'>
  <h2><a name="_Toc497074132"></a><a name="_Toc497074791">Введение</a></h2>
  <p>В настоящее время Интернет все шире используется в самых 
    различных видах человеческой деятельности. Одними из его основных преимуществ 
    являются скорость доставки информации, распространенность - для работы с Интернетом 
    достаточно наличия простой телефонной линии, и независимость от используемой 
    пользователем операционной системы, будь то Windows, Unix или MacOS. Такие 
    качества Интернета позволяют использовать его для организации информационных 
    и деловых процессов как внутри предприятий, так и в среде клиентов и деловых 
    партнеров, при этом географическая  удаленность  между  партнерами  может  
    не приниматься во внимание. На сегодня организация и поддержка в Интернете    
    &quot;фирменного&quot;    узла    считаются    практически обязательными для 
    ведения успешного бизнеса или представления данных о некоммерческой организации.</p>
  <p>Возможность переноса на базу Интернета деловых процессов 
    привел к появлению абсолютно нового вида коммерции - так называемой электронной 
    коммерции (e-commerce); ее ближайшим аналогом можно считать торговлю по каталогам. 
    Основное проявление электронной коммерции - Интернет-магазины, где посетитель, 
    не выходя из дому, может просмотреть список предлагаемых товаров и услуг, 
    получить о них всю необходимую информацию (вплоть до внешнего вида товара), 
    выбрать необходимое и оплатить заказ. Чаще всего заказанный товар доставляют 
    покупателю непосредственно на дом. Этот способ торговли может использоваться 
    как для общения с обычными покупателями, так и для внутрикорпоративного взаимодействия 
    -например, при заказе дилером товара у дистрибьютора. Кроме удобств ведения 
    такой торговли можно лишь упомянуть, что средства,   проходящие   через   
    электронную   торговлю,   уже исчисляются миллиардами долларов.</p>
  <p>Для   интеграции   1C Предприятия   7.7   и   различных Интернет-технологий   
    (в   первую   очередь   Web)   создано Web-расширение   1 С Предприятия   
    7.7.   При   использовании Web-расширения взаимодействие с пользователями 
    1С:Предприятия можно организовать, совместив средства 1 (^Предприятия и стандартные 
    возможности Web-интерфейса. Web-приложения на основе  1С:Предприятия  могут  
    как  входить  в  структуру внутрикорпоративных процессов управления, так и 
    представлять собой Интернет-магазины. При таком подходе получение всей необходимой 
    информации и управление деятельностью предприятия можно осуществлять, используя 
    штатные средства 1С:Предприятия 7.7. На витрину Интернет-магазина может быть 
    вынесен каталог товаров с описаниям и внешним видом товара, заказанный товар 
    может быть зарезервирован до оплаты или же покупатель может оплатить заказ 
    карточкой, в базе может поддерживаться корзина покупателя, хранящая отложенные 
    покупателем товары между посещениями магазина.</p>
  <h3><a name="_Toc497074133"></a><a name="_Toc497074792">Структура описания</a></h3>
  <p>Первые три главы описания посвящены общим вопросам, связанным 
    со стандартами Интернет. В них вводятся стандартные термины и понятия, разбирается 
    построение Web-приложений и технология AS Р.</p>
  <p>Глава 4 описывает процесс установки и запуска используемого 
    программного обеспечения.</p>
  <p>Такие вопросы интеграции технологии ASP и 1 (^Предприятия, 
    как написание ASP-страниц, работа с пользовательскими сессиями и т.д., разбираются 
    в главе 5.</p>
  <p>В главе 6 рассматривается пример, входящий в поставку -«Портал 
    реализатора». Дается детальное описание сайта портала и используемой конфигурации.</p>
  <h2><a name="_Toc497074134"></a><a name="_Toc497074793">Интернет-технологии</a></h2>
  <h3><a name="_Toc497074135"></a><a name="_Toc497074794">Общие понятия и термины</a></h3>
  <p>Интернет    построен    по   технологии    «клиент-сервер», 
    предполагающей использование двух основных приложений -приложения, работающего 
    на компьютере клиента, и сервера, выполняющего  клиентские  запросы.   В  
    Интернете  такими приложениями являются браузер (browser, обозреватель) со 
    стороны клиента и Web-сервер (Интернет-сервер, WWW-server) в качестве сервера. 
    Один сервер может поддерживать один или несколько сайтов - узлов Интернета, 
    логически объединяющих информацию различного характера (например, сайт фирмы 
    может представлять всю информацию о фирме, от местоположения до финансового 
    состояния). Структура сайга представляет собой дерево каталогов, аналогичное 
    файловой системе, все файлы на сервере лежат в каталогах этого дерева.</p>
  <p>Для общения между клиентом и сервером используется протокол 
    HTTP (Hypertext Transfer Protocol, протокол передачи гипертекста), который 
    в свою очередь использует TCP/IP. Основной цикл протокола HTTP представляет 
    собой пару «запрос файла клиентом -    передача   файла   сервером»,   причем   
    файл подразумевается произвольным. Для указания необходимого файла браузер 
    передает серверу URL (Universal Resource Locator, универсальный  указатель  
    ресурсов),  получаемый  браузером результат обычно называют страницей. Чаще 
    всего URL указывается пользователем только один раз - для попадания на необходимый 
    сайт (например, www.lc.ru), далее новые страницы запрашиваются браузером при 
    переходе по ссылкам.</p>
  <p>В Интернете используются в основном файлы HTML (HyperText 
    Markup Language, язык разметки гипертекста), содержащие как различно оформленный 
    текст с графикой, так и ссылки на другие</p>
  <p style='line-height:90%'>страницы. Кроме этого, HTML-страницы 
    могут содержать также программные вставки на так называемых скриптовых языках 
    -самым распространенным из них является JavaScript (JSript, ECMAScript). Эти 
    вставки могут выполняться браузером, что позволяет изменять содержимое страницы 
    в браузере без обращения к серверу. Такие страницы содержат так называемый 
    DHTML (Dynamic HTML, динамический HTML) - расширение HTML. Все HTML-файлы 
    представляют собой обычные текстовые файлы, содержащие специального вида фрагменты 
    - Tera(tags) HTML, описывающие все параметры отображения страницы - шрифт, 
    размер, картинки, ссылки и пр. Благодаря такому формату HTML-файлы можно писать 
    в обычном текстовом редакторе, однако чаще применяются специализированные 
    WYSIWYG-ред акторы HTML, интегрированные с приложениями разработки сайтов.</p>
  <h3><a name="_Toc497074136"></a><a name="_Toc497074795">Web-серверы</a></h3>
  <p>На сегодняшний день Web-серверы, кроме выполнения основной 
    функции - возврата файла, запрошенного пользователем, позволяют расширять 
    свою применимость, предоставляя для расширения функциональности различные 
    интерфейсы. Одна из основных проблем, решаемых этими интерфейсами - создание 
    возвращаемой пользователю страницы «на ходу», при этом в качестве исходного 
    материала обычно используется адрес (URL), переданный пользователем, и файл, 
    находящийся на сервере по этому адресу. Существует общий, стандартный для 
    всех серверов интерфейс, называемый CGI (Common Gateway Interface, общий интерфейс 
    узла), который позволяет создавать нужные страницы, просто выполняя указанные 
    пользователем приложения на компьютере сервера. Этот способ требует довольно 
    много серверных ресурсов, поэтому кроме CGI каждый сервер предоставляет дополнительные 
    возможности расширения, варьирующиеся от сервера к серверу.</p>
  <p>Все это позволяет создавать на базе серверов различные приложения, 
    для которых основным пользовательским интерфейсом служит браузер.</p>
  <h3><a name="_Toc497074137"></a><a name="_Toc497074796">Браузеры</a></h3>
  <p>Основными браузерами на сегодняшний день являются два браузера 
    - Microsoft Internet Explorer и Netscape Navigator. Кроме просмотра  HTML-страниц 
    оба имеют развитые  сервисные возможности. Оба браузера имеют реализации для 
    Windows, MacOS и Unix. Эти браузеры имеют неодинаковые наборы расширений HTML 
    и различаются по возможностям работы с DHTML, что приходится учитывать при 
    подготовке страниц и разработке сайтов.</p>
  <p>Из остальных браузеров стоит упомянуть Opera (www.opera.com) 
    и Neoplanet (www.neoplanet.com).</p>
  <h3><a name="_Toc497074138"></a><a name="_Toc497074797">Web-приложения</a></h3>
  <p>Web-приложения  (web  applications,  часто  их  называют 
    Интернет-приложениями, internet applications) представляют собой набор страниц, 
    объединенных общей функциональностью. Все Web-приложения   являются   клиент-серверными,   
    что,   очевидно, определяется технологией построения Интернета. В приложениях 
    обычно задействуются все вышеперечисленные технологии, от DHTML, исполняемом 
    в клиентском браузере, до расширений Web-сервера. В настоящий момент Web-приложения 
    используются как внутри предприятий в локальных сетях, так и в Интернете - 
    это широко известные Интернет-магазины.</p>
  <h2><a name="_Toc497074139"></a><a name="_Toc497074798">Web</a>-приложения</h2>
  <p>Началом «взрывного» роста Интернета принято считать начало 
    90х годов. Именно в это время появились и были стандартизованы протокол HTTP 
    и язык описания страниц HTML, предназначенные для World Wide Web. Изначально 
    WWW предназначался для публикации различной информации текстового и графического 
    характера, поэтому язык HTML имел очень много недостатков, в первую   очередь 
    -   практически   отсутствовали   механизмы управления размещением содержания 
    на HTML-странице и взаимодействия с пользователями. Однако по мере роста интереса 
    к Интернету росли и требования пользователей к содержанию (иначе - к контенту, 
    от англ. content), что касалось как оформления опубликованной   информации,   
    так   интерактивности   при взаимодействии пользователя с сайтами. На сегодняшний 
    день существующие в Интернете средства, реализованные в Web-серверах, средствах 
    разработки сайтов и браузерах, позволяют говорить о создании так называемых 
    Web-приложений, или приложений, построенных на мехнизмах Интернета и позволяющих 
    пользователям взаимодействовать с Web-серверами. Безусловно, Web-приложения 
    имеют клиент-серверную архитектуру, что диктуется общим построением Интернета. 
    Как и традиционные программные приложения, Web-приложения имеют несколько 
    аспектов: архитектура, подходы к разработке, безопасность приложений, которые 
    и рассматриваются в этой главе.</p>
  <h3><a name="_Toc497074140"></a><a name="_Toc497074799">Область использования 
    Web-приложений</a></h3>
  <p>Одной из важных характеристик Web-приложения является область 
    использования приложения. По области использования Web-приложения делятся 
    на intranet - внутрикорпоративные приложения, рассчитанные на использование 
    во внутренней (локальной) сети, extranet - также внутрикорпоративные, но уже 
    работающие  во  внешней  среде  (Интернете),  и,  наконец, internet-приложения,  
    рассчитанные  на  общее  использование (например, Интернет-магазины). Такое 
    деление возникает из-за различности подходов к построению таких приложений. 
    Самые жесткие требования на разработку накладывает internet-приложение - это 
    использование произвольных браузеров и максимальная безопасность   в   работе.   
    При   разработке   intranet-   и extranet-приложений    список    используемого    
    программного обеспечения можно ограничить, а для intranet-приложений еще и 
    снизить требования к безопасности.</p>
  <h3><a name="_Toc497074141"></a><a name="_Toc497074800">Архитектура Web-приложений</a></h3>
  <p>Все Web-приложения можно условно разбить на три составные 
    части: серверная часть, клиентское приложение и интерфейс.</p>
  <p>Серверную часть образует Web-сервер, возвращающий страницы 
    приложения по запросам пользователя. Чаще всего эти страницы создаются динамически 
    на основе информации, обрабатываемой приложением. Именно на создание страниц 
    &quot;на лету&quot; направлены различные расширения Web-серверов, одно из 
    которых - CGI - уже было ранее упомянуто.</p>
  <p>Клиентское приложение (браузер) последовательно запрашивает 
    страницы с сервера, используя Dynamic HTML для управления интерфейсом и частичной 
    обработки информации на компьютере клиента.</p>
  <p>Пользовательский интерфейс специально выделен отдельным пунктом, 
    так как именно формированием клиентского интерфейса и работой с ним Web-приложения 
    отличаются от привычных клиент-серверных приложений. В последнем случае клиентское 
    приложение обменивается с сервером только данными, используя для   формирования   
    интерфейса   ресурсы   приложения.   В Web-приложениях интерфейс практически 
    полностью формируется на сервере, оставляя для исполнения клиентом только 
    управление созданной страницей. Более того, существующие стандарты на браузеры 
    накладывают дополнительную специфику на модель поведения приложения. В частности, 
    два свойства, которые необходимо принимать во внимание при разработке приложения 
    -наличие истории просмотра страниц и произвольный доступ к любой странице 
    приложения по известному адресу. Последнее свойство обязательно должно учитываться 
    в приложениях, использующих авторизацию пользователя.</p>
  <p>Другая серьезная проблема в разработке Web-приложения -отслеживание 
    сессии конкретного пользователя. Дело в том, что по определению HTTP-протокол 
    не имеет понятия текущего состояния (stateless), т.е. очередной запрос страницы 
    абсолютно не зависит от предыдущих  запросов  и  потому  не  требует уникального 
    идентификатора. Для отслеживания последовательных запросов и идентификации 
    пользователя используются так называемые cookies.</p>
  <h3><a name="_Toc497074142"></a><a name="_Toc497074801">Cookies</a></h3>
  <p>Cookies (русского термина не имеют, в единственном числе 
    -cookie, точный перевод - «домашнее печенье») представляют собой небольшие   
    файлы,   содержащие   произвольную   текстовую информацию.   Эти   файлы   
    формируются   и   передаются пользовательскому приложению Web-сервером и хранятся 
    на компьютере пользователя. При очередных запросах страниц информация из этих 
    файлов пересылается на сервер вместе с запросом, что позволяет отличать и 
    отслеживать работу различных пользователей с Web-сервером. Каждый cookie имеет 
    следующие свойства:</p>
  <p>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; наименование 
    cookie;</p>
  <p>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; значение cookie, 
    содержащее собственно информацию;</p>
  <p style='line-height:
90%;'>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; домен. Указанный домен ограничивает 
    область видимости cookie. По умолчанию домен устанавливается в домен текущей 
    страницы (например, для <u>www.lc.ni</u> - домен Ic.ru);</p>
  <p style='line-height:
90%;'>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; каталог. Указанный каталог ограничивает 
    область видимости cookie внутри сервера. Каталог &quot;/&quot; используется 
    для указания всех   каталогов   сервера.   По   умолчанию   каталог устанавливается 
    в каталог текущей страницы;</p>
  <p style='line-height:
90%;'>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; срок действия. Срок ограничивает 
    время действия cookie. По истечении указанного срока cookie удаляется с компьютера 
    пользователя.   По   умолчанию   срок   действия   не устанавливается, что 
    означает удаление cookie при закрытии браузера (это эквивалентно установке 
    срока действия в 0);</p>
  <p style='line-height:
90%;'>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; секретность. Cookie с установленным 
    свойством секретности могут посылаться на Web-сервер только по SSL-соединению. 
    Это свойство используется редко. По умолчанию секретность не устанавливается.</p>
  <p>Домен и каталог необходимы для ограничения области действия 
    cookie - информация из cookie посылается вместе с запросом только в том случае, 
    если домен и каталог cookie в точности совпадают с доменом и каталогом запрашиваемой 
    страницы. Каждый cookie полностью характеризуется своим наименованием, доменом 
    и путем.</p>
  <p>Согласно стандарту браузер может как хранить и использовать 
    cookies в своей работе, так и отключать их прием и сохранение в целях безопасности. 
    Для этого в настройках браузеров обычно присутствует флажок, включающий и 
    отключающий работу с cookie. По умолчанию работа с cookie включена, однако 
    пользователь вправе отключить прием cookie. Для intranet- и extranet-приложений 
    возможность отключения cookie можно игнорировать, просто введя некоторую дисциплину 
    использования приложения. Для общих Web-приложений, опирающихся на использование 
    cookies, такая возможность отключения представляет серьезную проблему, так 
    как не существует точного способа определить, принимает ли браузер cookies.</p>
  <p>С использованием cookies отслеживание действий пользователя 
    упрощается - теперь сервер может сохранить в cookie некоторую внутреннюю информацию, 
    и при последующих обращениях идентифицировать пользователя. Однако здесь следует 
    учесть одну тонкость. Поскольку два запущенных экземпляра одного браузера 
    используют единую базу cookies, то сервер не сможет отличить эти браузеры, 
    даже если они будут находиться на разных страницах. Из вышесказанного вытекает, 
    что реально идентифицируется не сам пользователь, а скорее его компьютер. 
    - при запуске двух одинаковых браузеров Web-сервер будет воспринимать их как 
    одну сессию. При запуске разных браузеров может возникнуть две сессии, если 
    браузеры используют разные базы для хранения cookies.</p>
  <h3><a name="_Toc497074143"></a><a name="_Toc497074802">Построение Web-приложения</a></h3>
  <p>Как и для обычных приложений, универсальной схемы построения 
    Web-приложения не существует, поскольку различные приложения требуют различных 
    подходов к обработке данных, построению пользовательского интерфейса и т.д.</p>
  <p>Однако можно построить некоторую приблизительную схему приложения 
    с авторизацией. Все приложение делится на три части -незащищенную, часть, 
    обеспечивающую авторизацию пользователя, и защищенную. В незащищенной части 
    пользователь может перемещаться произвольно, следуя ссылкам или по запомненным 
    ранее закладкам. Переход в защищенную часть осуществляется только после авторизации 
    пользователя, и все перемещения по защищенным страницам обязательно авторизуются.  
    При первой верной авторизации вся необходимая информация записывается в cookie, 
    и при последующих авторизациях информация берется в первую очередь из сохраненного 
    cookie. При отсутствии cookie (удален или браузер не принимает cookie) пользователь 
    снова проходит через интерактивную часть авторизации. Отсюда следует, что 
    при невозможности принимать cookie пользователь будет вынужден заново вводить 
    авторизующую информацию при каждом запросе страницы из защищенной части, а 
    каждая защищенная страница должна переадресовывать пользователя в незащищенную 
    часть или на авторизацию. Часть, отвечающая за авторизацию, может быть реализована 
    как одной, так и несколькими страницами.</p>
  <h3><a name="_Toc497074144"></a><a name="_Toc497074803">Серверные технологии</a></h3>
  <p>Серверные технологии, используемые в Web-приложениях, основываются 
    на достаточно простом и очевидном принципе динамического создания страницы 
    при запросе клиента вместо возврата готовой страницы. Такой подход позволяет 
    создавать страницы &quot;на лету&quot;, основываясь на различных данных (например, 
    из баз данных или информации о браузере клиента), доступных с сервера. Наиболее 
    «старая» и известная технология - CGI (Common Gateway Interface). Фактически 
    CGI позволяет создавать страницы путем запуска на сервере указанной пользователем 
    программы (естественно, список этих программ заранее задан администратором 
    Web-сервера). По ходу работы программа последовательно создает HTML-код результирующей 
    страницы, в зависимости от различных условий код может быть разным. Стандарт 
    CGI определяет достаточно   простой   протокол   взаимодействия   запущенной 
    программы и Web-сервера и поэтому реализован практически на всех существующих 
    Web-серверах.</p>
  <p>Web-сервер Internet Information Server дополнительно к CGI 
    реализует еще две технологии - ISAPI (Internet Server Application Programming 
    Interface) и ASP (Active Server Pages). Первая является некоторым аналогом 
    CGI, но использует не отдельные программы, а DLL, что дает значительную экономию 
    ресурсов сервера. Технология ASP основана на совместном использовании визуальной 
    разработки страницы и фрагментов скриптов, изменяющих HTML-код страницы в 
    зависимости от условий, в которых исполняется страница. Эта технология и используется 
    для расширения возможностей 1С:Предприятия 7.7.</p>
  <h3><a name="_Toc497074145"></a><a name="_Toc497074804">Свойства браузеров</a></h3>
  <p>На настоящий момент существуют серьезные функциональные различия 
    между версиями браузеров Internet Explorer и Netscape Navigator - более того, 
    различия имеют и реализации одного и того же браузера для разных платформ. 
    Часто это служит причиной создания двух версий сайта, учитывающих особенности 
    того или иного браузера. Однако есть общие технологии, поддерживаемые всеми 
    браузерами независимо от модели и платформы. Две из этих технологий - это 
    CSS (Cascading Style Sheets) и DHTML (Dynamic HTML). CSS предназначен в первую 
    очередь для разделения содержания сайта и его оформления. С помощью CSS всем 
    одинаковым элементам сайта (например, таблицам) можно задать единые правила 
    оформления, причем эти правила будут написаны не на каждой странице, а в отдельном 
    файле, что упрощает переоформление сайта. DHTML используется для динамического 
    изменения страниц в браузере без обращений к Web-серверу. Собственно DHTML 
    состоит из двух составляющих - DOM (Document Object Model, объектная модель 
    документа) и JavaScript (иначе стандарт ECMAScript), использующий DOM. JavaScript 
    -это стандартизованный объектно-ориентированный скриптовый язык общего назначения, 
    однако его исходное предназначение -исполнение в среде браузера. В качестве 
    контекста исполнения используются объекты, расположенные на странице - таблицы, 
    ссылки, рисунки и т.д. Описание существующих объектов и методы работы с ними 
    и образуют DOM - стандарт на программный доступ к содержанию  HTML-страниц.  
    Основные различия между браузерами кроются именно в реализации этого стандарта, 
    что приводит к упрощению алгоритмов работы в клиентском браузере (для уменьшения 
    влияния различий), или к созданию нескольких страниц для разных браузеров.</p>
  <h3><a name="_Toc497074146"></a><a name="_Toc497074805">Интернет-магазины</a></h3>
  <p>В   качестве   примера  наиболее   известных  применений 
    Web-приложений   можно   привести   электронную  торговлю. Приложения, работющие 
    в этой области, чаще всего являются электронными магазинами или Интернет-магазинами.</p>
  <p>В число основных элементов Интернет-магазина входят витрина 
    (каталог товаров), корзина покупателя и оплата заказанного товара.</p>
  <p>Витрина    практически    всегда    представляет    собой 
    структурированное по категориям дерево товаров с возможностью навигации по 
    дереву и поиска нужного товара.</p>
  <p>Корзина покупателя содержит все выбранные пользователем товары, 
    при этом содержимое корзины может как сохраняться между различными посещениями 
    магазина, так и действовать только при текущем посещении. Это зависит не только 
    от магазина, но и от возможностей  браузера  пользователя,  так  как  существует 
    единственная    возможность   однозначно   идентифицировать пользователя между 
    сеансами - использовать cookie. При отправке запроса браузер передает все 
    возможные для этого сайта и пути cookie серверу, который имеет возможность 
    прочитать их содержимое и определить пользователя магазина. При отправке страницы 
    сервер может передать cookie, которые браузер должен сохранить на компьютере 
    пользователя. Если прием cookie в браузере отключен или просто невозможен, 
    то различные входы одного покупателя в магазин идентифицировать нельзя, и, 
    как следствие, корзина такого покупателя может храниться лишь до момента его 
    выхода из магазина.</p>
  <p>Оплата заказанного товара может выполняться различными способами 
    - традиционными безналичным или наличным, или электронными со счета или по 
    кредитной карте. Оплата традиционными способами лишь резервирует товар в магазине 
    до подтверждения оплаты, оплата электронным методом может быть выполнена немедленно 
    и в этом случае товар может быть незамедлительно отправлен к покупателю.</p>
  <p>Ссылки на работающие Интернет-магазины можно найти на сайте 
    фирмы Аркадия www.magazin.ru.</p>
  <h3><a name="_Toc497074147"></a><a name="_Toc497074806">Технология ASP</a></h3>
  <p>Как и все остальные расширения функциональности Web-сервера 
    технология ASP предназначена для динамического создания страницы при запросе 
    клиента. Такой подход позволяет создавать страницы &quot;на лету&quot;, основываясь 
    на различных данных (например, из баз данных или информации о браузере клиента), 
    доступных с сервера. Чаще всего динамические страницы можно условно разбить 
    на две логические части - информационное наполнение страницы и ее визуальное 
    представление (обычно определяемое общим стилем сайта), при этом в отличие 
    от изменяемой информационной части оформление чаще всего статично. Для создания 
    оформления страниц традиционно удобны различные WYSIWYG-редакторы страниц 
    (например, Frontpage или Dreamweaver), однако существовавший изначально единственный 
    способ динамической генерации страниц -CGI - для создания таких страниц не 
    подходит, так как CGI-приложения создают весь HTML-текст страниц программным 
    путем. Поэтому была предложена другая технология создания динамических страниц, 
    названная ASP (Active Server Pages -Активные Серверные Страницы).</p>
  <p>Основой этой технологии является использование HTML-страниц 
    с внедренным в HTML-код программным кодом на некотором   языке   программирования,   
    создающем   часть результирующей страницы. Код обычно называют скриптом (script), 
    а язык программирования - скриптовым. Такой подход позволяет визуально редактировать 
    оформление страниц, используя для вывода информации скрипты на различных языках. 
    Фактически ASP-страницы   являются   обычными   HTML-страницами   (с некоторыми   
    синтаксическими   отличиями),   дополнительно обрабатываемые на сервере перед 
    отправкой клиенту. Использование скриптов позволяет работать с OLE-объектами, 
    что в совокупности с встроенными в скриптовые языки возможностями дает практически 
    неограниченные возможности доступа и обработки различной информации. Технология 
    ASP рассчитана на использование только с Web-сервером II S.</p>
  <h3><a name="_Toc497074148"></a><a name="_Toc497074807">ASP-страницы</a></h3>
  <p>В программном коде страницы может быть использовано несколько 
    скриптовых языков, при этом процедуры и функции, написанные на одном языке, 
    могут быть вызваны из другого языка. В поставку IIS входят два скриптовых 
    языка - JavaScript и VBScript, однако их число может быть расширено благодаря 
    использованию открытой технологии Active Scripting.</p>
  <p>Для внедрения скриптов в HTML-код страницы используется два 
    различных  варианта  тегов:  &lt;%код  скрипта%&gt;  и  &lt;script language=&quot;имя   
    языка&quot;   гипа^&quot;зегуег&quot;&gt;код   скрипта&lt;/8спр1&gt;. Программный 
    код между тегами &lt;% и %&gt; предполагается написанным на определенном для 
    этой страницы первичном (primary, default) языке, во втором случае язык скрипта 
    задается параметром тега language. Скриптов, использующих как первый, так 
    и второй вариант написания, на странице может быть несколько. Порядок исполнения 
    страницы Web-сервером довольно сложен: сначала  исполняются  все  скрипты,  
    заключенные  в  теги &lt;script&gt;&lt;/script&gt; и написанные<b> не</b> 
    на первичном языке, причем порядок обработки таких скриптов (если их несколько) 
    неопределен. Затем происходит последовательная обработка страницы - на этом 
    этапе по мере обработки клиенту последовательно пересылается HTML-код страницы 
    и исполняются скрипты, написанные в тегах &lt;%%&gt;. И наконец снова исполняются 
    скрипты, заключенные между &lt;script&gt;&lt;/script&gt;, но уже использующие 
    язык страницы по умолчанию, порядок обработки таких скриптов (если их несколько) 
    также неопределен. В обоих случаях весь создаваемый скриптами HTML пересылается 
    клиенту (или буферизуется на сервере для отложенной отправки - это зависит 
    от установки Response.Buffer). Исходя из такого порядка обработки страницы 
    рекомендуется в тегах &lt;script&gt;&lt;/script&gt; располагать только процедуры 
    и функции (на любом языке) и вызывать их при исполнении скриптов в тегах &lt;%%&gt;. 
    Только таким образом можно обеспечить однозначность последовательности исполнения 
    скриптов. </p>
  <p>Для   управления   различными   параметрами   страницы используются 
    директивы (directives) ASP. Директивы пишутся в первой строке страницы в единственном 
    теге &lt;%@ директивы %&gt; через пробел в виде пар «директива=значение». 
    Ниже приведен список директив с кратким описанием:</p>
  <p>LANGUAGE - устанавливает язык по умолчанию для страницы. 
    Все скрипты, использующие теги &lt;%%&gt;, должны быть написаны именно на 
    указанном языке. Возможные значения - наименования скриптовых языков (изначально 
    возможны VBScript и JScript).</p>
  <p>ENABLESESIONSTATE   -    включает   или   отключает использование 
    этой страницей пользовательских сессий. Возможные значения - True или False.</p>
  <p>CODEPAGE - устанавливает кодовую страницу, используемую в 
    преобразовании текста при передаче текста из программного кода в Web-сервер.  
    Этот  параметр имеет  аналог в языке  (см. Session.CodePage).</p>
  <p>LCID - .устанавливает идентификатор текущей региональной 
    установки (local identifier), определяющей формат дат, символ валюты и т.д. 
    Эта установка необходима для правильной работы встроенных   функций   скриптовых   
    языков,   использующих вышеуказанные данные. Этот параметр имеет аналог в 
    языке (см. Session.LCID).</p>
  <p>Каждая ASP-страница исполняется в некотором контексте. Этот 
    контекст предоставляется странице сервером в виде набора объектов, позволяющих 
    получать доступ к свойствам сервера и информации о клиенте, передавать готовый 
    HTML клиентскому приложению и т.д. Код ASP-страницы создается только при запросе 
    страницы и после завершения уничтожается, поэтому хранить в странице статические 
    объекты невозможно.</p>
  <h3><a name="_Toc497074149"></a><a name="_Toc497074808">Приложение</a></h3>
  <p>Несколько ASP-страниц можно объединить в приложение (application). 
    Это объединение носит несколько механический характер -   приложением   называются   
    все   ASP-страницы, находящиеся в специально указанном каталоге (корневом 
    каталоге приложения) или его подкаталогах.</p>
  <p>В корневом каталоге приложения может находиться файл global.asa 
    - специальный файл, содержащий предопределенные процедуры и объявления глобальных 
    статических объектов.</p>
  <p>В   приложении   существуют   четыре   предопределенные процедуры 
    - Session_OnStart, Session_OnEnd, Application_OnStart, Application_OnEnd. 
    Эти процедуры вызываются соответственно при начале и завершении отдельных 
    пользовательских сессий и всего приложения в целом. Началом работы приложения 
    является запрос пользователем произвольной страницы приложения, завершением 
    -завершение последней сессии.</p>
  <p style='line-height:90%'><b>Для использования предопределенных 
    процедур </b><b>Application </b><b>OnStart и </b><b>Application </b><b>OnEnd 
    их необходимо реализовать на языке отличном от </b><b>V7</b><b>Script. </b><b>Web-расширение 
    не поддерживает исполнение этих процедур.</b></p>
  <h3><a name="_Toc497074150"></a><a name="_Toc497074809">Пользовательские сессии</a></h3>
  <p>Для разделения работы различных пользователей с одним ASP-приложением   
    используется   понятие   сессии   (session). Фактически ASP-сессия - это некоторый 
    контекст (значения переменных, объекты и т.д.) конкретного пользователя. Новая 
    сессия запускается при выполнении одного из следующих условий:</p>
  <p style='line-height:
90%;'>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; пользователь запросил страницу 
    приложения, и global.asa содержит процедуру Session_OnStart;</p>
  <p style='line-height:
90%;'>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; пользователь запросил страницу 
    приложения, и global.asa содержит объект &lt;object scope=session ...x/object&gt; 
    с областью видимости &quot;сессия&quot;;</p>
  <p>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; пользователь 
    сохранил некоторое значение в объекте Session:</p>
  <p align=left style='text-align:left;
'>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Session. Уа1ие(&quot;ИмяПеременной&quot;,Значение).</p>
  <p>Для отслеживания сессии конкретного пользователя при последовательных 
    запросах используются cookies (см. Cookies, стр. 17). При начале сессии на 
    компьютер пользователя в cookie передается некоторый уникальный защищенный 
    от воспроизведения идентификатор. При последующих запросах этот cookie передается 
    наоборот от пользователя на Web-сервер, что позволяет однозначно идентифицировать 
    пользователя и определить его сессию. Cookie с идентификатором сессии на компьютере 
    пользователя уничтожается при закрытии браузера. База данных, хранящая соответствия 
    между сессиями и идентификаторами в IIS создается заново при перезапуске  
    сервера,  поэтому  полагаться  на  уникальность идентификатора сессии в течение 
    длительного времени не следует. Весь механизм отслеживания сессии встроен 
    в IIS и работает автоматически.</p>
  <h2><a name="_Toc497074151"></a><a name="_Toc497074810">Объекты</a></h2>
  <p>В контексте ASP-страницы доступно пять основных объектов, 
    предоставляемых IIS: Session, Application, Request, Response, Server. Их неполное 
    описание приведено ниже.</p>
  <h3><a name="_Toc497074152"></a><a name="_Toc497074811">Request</a></h3>
  <p>Этот объект представляет запрос пользователя на получение 
    текущей страницы.</p>
  <h4><a name="_Toc497074812">Cookies</a></h4>
  <p>Этот массив содержит все cookie, переданные пользователем 
    на Web-сервер.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис</b><b>:</b></p>
  <p align=left style='text-align:left;'>Request .Cookies <i>[&lt;</i><i>Имя</i><i> 
    cookie&gt;]</i></p>
  <p align=left style='text-align:left;
'><b>Параметры:</b></p>
  <p align=left style='
text-align:left;
line-height:115%'><i>&lt;Имя </i><i>cookie&gt;</i>       Строка,   содержащая   
    наименование cookie.</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Массив содержит все переданные при запросе cookies. Каждый 
    cookie является объектом со своими свойствами, перечисленными ниже. Cookie 
    в массиве доступны только для чтения.</p>
  <p align=left style='text-align:left;
'><b>Значения элементов </b><b>cookie:</b></p>
  <p><b>Item</b>. Значение cookie, содержащее собственно информацию. 
    Domain (домен). Ограничение области видимости для cookie указанным доменом. 
    По умолчанию устанавливается в домен текущего документа.</p>
  <p><b>Expires</b> (срок действия). Ограничение времени действия 
    cookie. По истечении указанного срока cookie удаляется с компьютера пользователя. 
    По умолчанию устанавливается в 0, что эквивалентно удалению cookie при закрытии 
    браузера.</p>
  <p style='line-height:90%'><b>Path</b> (путь). Ограничение области 
    видимости для cookie указанием каталога на сервере. Cookie виден только для 
    файлов в указанном каталоге. Каталог &quot;/&quot; используется для указания 
    всех каталогов сервера.</p>
  <p align=left style='text-align:left;
'><b>Пример:</b></p>
  <p align=left style='
text-align:left;
'>Если (Request.Cookies(&quot;CookieName&quot;).Item = &quot;NoPage&quot;) Тогда 
    Страница = &quot;Exit.asp&quot; ;</p>
  <p align=left style='text-align:left;'>КонецЕсли ;</p>
  <h4><a name="_Toc497074813">QueryString</a></h4>
  <p>Возвращает значение переданного параметра по имени параметра.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис</b><b>:</b></p>
  <p align=left style='text-align:left;'>Request. Query-String 
    (<i>&lt;</i><i>Имя</i><i> параметра</i><i>&gt;} .</i> Item</p>
  <p align=left style='text-align:left;
'><b>Параметры:</b></p>
  <p align=left style='
text-align:left;
line-height:115%'><i>&lt;Имя параметра&gt;</i>   Строка,   содержащая   наименование 
    параметра.</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Этот метод чаще всего используется при работе с формами, 
    передающими значения элементов управления через URL в виде пар &quot;Имя=3начение&quot;. 
    В силу особенностей 1С:Предприятия при работе с OLE для получения значения 
    параметра после вызова метода необходимо добавить .Item.</p>
  <p align=left style='text-align:left;
'><b>Пример</b><b>:</b></p>
  <p align=left style='text-align:left;'>ИмяПользователя = Request.QueryString(&quot;UserName<sup>1</sup>').Item</p>
  <h4><a name="_Toc497074814">ServerVariables</a></h4>
  <p>Этот метод предоставляет различную информацию о сервере, 
    пользователе, текущем запросе и т.д.</p>
  <h4><a name="_Toc497074815"><i>Синтаксис</i></a><i>:</i></h4>
  <p>Request. ServerVariables (&lt;Имя параметра &gt;)</p>
  <p align=left style='text-align:left;
'><b>Параметры:</b></p>
  <p><i>&lt;Имя параметра&gt;</i>  Строка,   содержащая   наименование 
    параметра, для которого требуется возвратить информацию</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Этот метод позволяет получить полную информацию о среде исполнения 
    ASP-страницы - имя страницы, адрес пользователя, запросившего страницу, имя 
    сервера и т.д. Некоторые возможные значения параметра приведены ниже:</p>
  <p>HTTP_USER_AGENT              наименование браузера пользователя</p>
  <p>PATH INFO                              информация о пути 
    к текущей странице на сервере</p>
  <p>PATH TRANSLATED               информация о физическом пути 
    текущей страницы на диске</p>
  <p>REMOTE_HOST REMOTE USER адрес компьютера пользователя имя 
    пользователя</p>
  <p align=left style='text-align:left;
'><b>Пример</b><b>:</b></p>
  <p>Сообщить(Request.ServerVariable(&quot;HTTP_USER_AGENT&quot;))</p>
  <h3><a name="_Toc497074153"></a><a name="_Toc497074816">Response</a></h3>
  <p>Этот объект представляет ответ Web-сервера на запрос пользователя.</p>
  <h4><a name="_Toc497074817">Cookies</a></h4>
  <p>Этот массив содержит все cookie, передаваемые пользователю 
    в ответе на запрос. По всем свойствам эквивалентен массиву Cookies объекта 
    Request, за исключением того, что в Response.Cookies есть доступ как на чтение, 
    так и на запись.</p>
  <h4><a name="_Toc497074818">Buffer</a></h4>
  <p>Этот атрибут контролирует предварительную буферизацию при 
    пересылке HTML пользователю.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис:</b></p>
  <p>Response.Buffer</p>
  <p align=left style='text-align:left;
'><b>Возможные значения:</b></p>
  <p>True/False (I/O)</p>
  <p><b>Описание:</b></p>
  <p>Если переменная установлена в True, то весь пересылаемый 
    клиенту HTML буферизуется на сервере и отправляется только при завершении 
    формирования страницы. Обычно это свойство используется при направлении запроса 
    пользователя на дргую страницу. Свойство доступно как на чтение, так и на 
    запись. Начальная установка соответствует значению, установленному в ММС для 
    приложения.</p>
  <p><b>Пример</b><b>:</b></p>
  <p align=left style='text-align:left;
'>Response. Buffer = 1;</p>
  <h4><a name="_Toc497074819">Write</a></h4>
  <p>Передает фрагмент HTML в приложение пользователя.</p>
  <h4><a name="_Toc497074820"><i>Синтаксис</i></a><i>:</i></h4>
  <p>Response .Write <i>(&lt;</i><i>НТМ</i><i>L-строка</i><i>&gt;)</i></p>
  <p align=left style='text-align:left;
'><b>Параметры:</b></p>
  <p><i>&lt;НТМЬ-строка&gt;</i> Строка, содержащая фрагмент HTML-кода, 
    передаваемый пользователю.</p>
  <h4><a name="_Toc497074821"><i>Описание:</i></a></h4>
  <p>Метод Write передает фрагмент HTML на компьютер пользователя. 
    Переданный фрагмент может буферизоваться, если свойство Buffer установлено 
    в 1.</p>
  <p align=left style='text-align:left;
'><b>Пример:</b></p>
  <p>Response. У?г-[Ье(''&lt;р&gt;Параграф&lt;/р&gt;&quot;) ;</p>
  <h4><a name="_Toc497074822">Clear</a></h4>
  <p>Очищает буфер переданного клиенту HTML.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис</b><b>:</b></p>
  <p>Response.Clear()</p>
  <p align=left style='text-align:left;
'><b>Параметры:</b></p>
  <p>отсутствуют</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Метод Clear удаляет весь буферизованный HTML. Этот метод 
    может использоваться при обработке ошибок, происшедших при исполнении скрипта, 
    для создания другой страницы.</p>
  <p align=left style='text-align:left;
'><b>Пример:</b></p>
  <p>Если (Ошибка = 1) Тогда Response.Clear() ;</p>
  <p align=left style='text-align:left;'>КонецЕсли</p>
  <h4>&nbsp;</h4>
  <h4><a name="_Toc497074823">End</a></h4>
  <p>Принудительно завершает обработку текущей страницы.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис</b><b>:</b></p>
  <p align=left style='text-align:left;'>Response.End()</p>
  <p align=left style='text-align:left;
'><b>Параметры:</b></p>
  <p>отсутствуют</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Метод End принудительно завершает обработку текущей страницы, 
    прерывая исполняемый скрипт. Если Response. Buffer установлен в 1, то весь 
    буферизованный HTML передается пользователю.</p>
  <p align=left style='text-align:left;
'><b>Пример</b><b>:</b></p>
  <p>Response.Clear() ;</p>
  <p>Response.End() ;</p>
  <h4><a name="_Toc497074824">Flush</a></h4>
  <p>Передает буферизованный HTML-код пользователю.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис</b><b>:</b></p>
  <p>Response.Flush()</p>
  <p align=left style='text-align:left;
'><b>Параметры:</b></p>
  <p>отсутствуют</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Если Response.Buffer равен 1, то весь буферизованный HTML 
    передается пользователю. В противном случае возникает ошибка времени исполнения.</p>
  <p align=left style='text-align:left;
'><b>Пример</b><b>:</b></p>
  <p align=left style='text-align:left;'>Response.Buffer = 1;</p>
  <p align=left style='text-align:left;'>Response.Write(&quot;&lt;р&gt;Параграф&lt;/р&gt;&quot;);</p>
  <p align=left style='text-align:left;'>Response.Flush();</p>
  <h4>&nbsp;</h4>
  <h4><a name="_Toc497074825">Redirect</a></h4>
  <p>Перенаправляет запрос на указанную страницу.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис</b><b>:</b></p>
  <p>Response. Redirect <i>(&lt;</i><i>Страница</i><i>&gt;)</i></p>
  <p align=left style='text-align:left;
'><b>Параметры:</b></p>
  <p><i>&lt;Страница&gt;</i>  Строка с наименованием страницы, 
    на которую производится переадресация.</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Метод Redirect перенаправляет запрос пользователя на другую 
    страницу, удаляя весь буферизованный к моменту вызова HTML. Для работы этого 
    метода требуется установка Response.Buffer в 1.</p>
  <p align=left style='text-align:left;
'><b>Пример</b><b>:</b></p>
  <p align=left style='text-align:left;'>Response.Redirect(&quot;login.asp&quot;) 
    ;</p>
  <h4>&nbsp;</h4>
  <h3><a name="_Toc497074154"></a><a name="_Toc497074826">Server</a></h3>
  <p>Этот объект предоставляет доступ к методам и информации Web-сервера.</p>
  <h4><a name="_Toc497074827">ScriptTimeout</a></h4>
  <p>Определяет время ожидания завершения скрипта в секундах.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис:</b></p>
  <p>Server.ScriptTimeout</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Атрибут ScriptTimeout управляет временем, отпущенным на исполнение 
    скрипта. После окончания времени ожидания скрипт считает зависшим и принудительно 
    прерывается. ScriptTimeout устанавливается по умолчанию в 90 секунд. В большее 
    значение этот атрибут имеет смысл устанавливать при создании объемных страниц 
    (например, отчетов). Атрибут доступен для чтения и записи.</p>
  <p>Пример:</p>
  <p>Server.ScriptTimeout = 360; // 6 минут</p>
  <h4><a name="_Toc497074828">CreateObject</a></h4>
  <p>Создает OLE Automation объект.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис</b><b>:</b></p>
  <p>Server. CreateObj ect (<i>&lt;ProgID&gt;}</i></p>
  <p align=left style='text-align:left;
'><b>Параметры:</b></p>
  <p><i>&lt;</i><i>ProgID&gt;</i>   ProgID создаваемого объекта.</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Метод CreateObject создает объект OLE Automation no переданному 
    ProgID. По умолчанию объект создается с областью видимости  &quot;страница&quot;  
    и  автоматически  уничтожается  при завершении обработки страницы. Если объект 
    необходимо сохранить для последующего использования, то можно воспользоваться 
    объектами Session или Application.</p>
  <p><b>Пример</b><b><i>:</i></b><b></b></p>
  <p>Session(&quot;MyObj&quot;) = Server.CreateObject(&quot;MyObjProgID&quot;);</p>
  <h4>&nbsp;</h4>
  <h4><a name="_Toc497074829">URLEncode</a></h4>
  <p>Перекодирует строку текста с учетом ограничений в написании 
    URL.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис</b><b>:</b></p>
  <p>Server.URLEncode(&lt;URL&gt;)</p>
  <p>Параметры<i>:</i></p>
  <p><i>&lt;URL&gt;</i>   Строка с URL.</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Метод URLEncode перекодирует переданную строку, учитывая 
    ограничения стандарта на символы, входящие в url(b частности, символ пробела 
    заменяется на %20) Этот метод обычно используется при построении URL программным 
    путем.</p>
  <p align=left style='text-align:left;
'><b>Пример:</b></p>
  <p>Response.Write(Server.URLEncode(&quot;http://www.lc.ru&quot;)) 
    ;</p>
  <h4>&nbsp;</h4>
  <h4><a name="_Toc497074830">MapPath</a></h4>
  <p>Конвертирует логический путь к странице на сервере физический 
    путь на локальном диске.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис:</b></p>
  <p>Server. MapPath (&lt;Путь <i>на сервере&gt;)</i></p>
  <p align=left style='text-align:left;
'><b>Параметры:</b></p>
  <p><i>&lt;Путь на сервере&gt;</i>   Строка, содержащая логический 
    путь от корневого каталога сервера или от текущего каталога.</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Метод MapPath конвертирует переданный логический путь на 
    сервере в физический на локальном диске. Если логический путь начинается с 
    символа «\» или «/», то метод возвращает полный физический путь, считая что 
    логический путь указан начиная от корня сервера. В противном случае переданный 
    логический путь считается указанным относительно текущего каталога. Для получения 
    местонахождения корневого каталога Web-сервера на локальном диске следует 
    передать в метод строку «/». Указанный путь не должен обязательно существовать.</p>
  <p align=left style='text-align:left;
'><b>Пример</b><b>:</b></p>
  <p>Server.MapPath(&quot;global.asa&quot;) ;</p>
  <h4>&nbsp;</h4>
  <h3><a name="_Toc497074155"></a><a name="_Toc497074831">Session</a></h3>
  <h4><a name="_Toc497074832">SessionID</a></h4>
  <p>Содержит идентификатор текущей сессии.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис:</b></p>
  <p>Session.SessionID</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>SessionID содержит идентификатор текущей сессии. Значения 
    идентификатора лежат в пределах от 0 до 2<sup>32</sup>-1. Атрибут доступен 
    только для чтения.</p>
  <p align=left style='text-align:left;
'><b>Пример</b><b>:</b></p>
  <p>Response.Write(Session.SessionID) ;</p>
  <h4>&nbsp;</h4>
  <h4><a name="_Toc497074833">Timeout</a></h4>
  <p>Максимальное время между последовательными запросами пользователя.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис:</b></p>
  <p>Session.Timeout</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Timeout  содержит   время   ожидания   между   запросами 
    пользователя в минутах. Если между последовательными запросами проходит больше 
    указанного времени, то сессия считается завершенной.  Начальная установка 
    соответствует  значению, установленному в ММ С для приложения. Атрибут доступен 
    для чтения/записи.</p>
  <p align=left style='text-align:left;
'><b>Пример</b><b>:</b></p>
  <p>Session.Timeout = 5;</p>
  <h4>&nbsp;</h4>
  <h4><a name="_Toc497074834">Abandon</a></h4>
  <p>Принудительно завершает текущую сессию.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис</b><b>:</b></p>
  <p>Session.Abandon()</p>
  <p align=left style='text-align:left;'><b>Параметры:</b></p>
  <p>отсутствуют</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Метод Abandon завершает текущую сессию, однако обработка 
    текущей страницы не прекращается. Сессия уничтожается только после завершения 
    текущей страницы.</p>
<br
clear=all style='page-break-before:always;'>
 
 
  <p align=left style='text-align:left;'><b>Пример:</b></p>
  <p>Если (ИмяПользователя='Иванов&quot;) Тогда Session.Abandon();</p>
  <p align=left style='text-align:left;'>КонецЕсли;</p>
  <h4>&nbsp;</h4>
  <h4><a name="_Toc497074835">Value</a></h4>
  <p>Сохраняет значение переменной с областью видимости &quot;сессия&quot; 
    на время существования сессии.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис:</b></p>
  <p>Value (&lt;Имя переменной&gt;,&lt;Значение 
    переменной&gt;) Value{&lt;Имя переменной&gt;)</p>
  <p align=left style='text-align:left;
'><b>Параметры:</b></p>
  <p><i>&lt;Имя переменной&gt;</i>  Строка, содержащая наименование 
    сохраняемого значения.</p>
  <p>&lt;<i>3начение переменной</i>&gt; Сохраняемое значение.</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Позволяет сохранять некоторое значение произвольного типа 
    с областью видимости &quot;сессия&quot; на время существования сессии. Каждому 
    значению присваивается уникальное имя для различения значений. Значение автоматически 
    уничтожается при уничтожении сессии. Значения встроенных объектов таким образом 
    сохранять нельзя,   т.е.   строка   Session. Value(&quot;varl&quot;, 
    Response)   является ошибочной.</p>
  <p align=left style='text-align:left;
'><b>Пример:</b></p>
  <p align=left style='text-align:left;'>Session.Value(&quot;ИмяПользователя&quot;,&quot;Иванов&quot;);</p>
  <p align=left style='text-align:left;'>Response.Write(Session.Value('ИмяПользователя'));</p>
  <h4>&nbsp;</h4>
  <h3><a name="_Toc497074156"></a><a name="_Toc497074836">Application</a></h3>
  <h4><a name="_Toc497074837">Lock</a></h4>
  <p>Обеспечивает монопольный доступ к значениям, сохраненным 
    в объекте Application.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис</b><b>:</b></p>
  <p>Application.Lock()</p>
  <p align=left style='text-align:left;
'><b>Параметры:</b></p>
  <p>отсутствуют</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Позволяет монопольно изменять значения сохраненных в Application значений, закрывая доступ для остальных пользователей. 
    Доступ автоматически восстановится при вызове метода Unlock, 
    завершении обработки страницы или по истечении времени таймаута.</p>
  <p align=left style='text-align:left;
'><b>Пример</b><b>:</b></p>
  <p align=left style='text-align:left;'>Application.Lock() ;</p>
  <p align=left style='text-align:left;'>Application.Value(&quot;тип&quot;,&quot;строка&quot;);</p>
  <p align=left style='text-align:left;'>Application.Unlock() ;</p>
  <h4>&nbsp;</h4>
  <h4><a name="_Toc497074838">Unlock</a></h4>
  <p>Восстанавливает общий доступ к значениям, сохраненным в объекте 
    Application.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис</b><b>:</b></p>
  <p>Application.Unlock()</p>
  <p align=left style='text-align:left;
'><b>Параметры:</b></p>
  <p>отсутствуют</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Метод Unlock является противоположным 
    по действию методу Lock, открывая доступ к значениям, 
    сохраненным в Application, всем пользователям приложения.</p>
  <p align=left style='text-align:left;
'><b>Пример</b><b>:</b></p>
  <p align=left style='text-align:left;
'>Application.Lock() ? Application.Value(&quot;тип&quot;,&quot;строка&quot;) 
    ;</p>
  <p align=left style='text-align:left;'>Application.Unlock() ;</p>
  <h4>&nbsp;</h4>
  <h4><a name="_Toc497074839">Value</a></h4>
  <p>Сохраняет  значение  переменной  с  областью  видимости &quot;приложение&quot; 
    на время существования сессии.</p>
  <p align=left style='text-align:left;
'><b>Синтаксис:</b></p>
  <p>Va lue (&lt;Имя переменной&gt;,&lt;3начение 
    переменной&gt;} Va lue (&lt;Имя переменной&gt;)</p>
  <p align=left style='text-align:left;
'><b>Параметры:</b></p>
  <p><i>&lt;Имя переменной&gt;</i>  Строка, содержащая наименование 
    сохраняемого значения.</p> 
    <p align=left style='text-align:left;
border:none;padding:0cm;'><i>&lt;3начение переменной&gt;</i></p>
  <p>Сохраняемое значение.</p>
  <p align=left style='text-align:left;
'><b>Описание:</b></p>
  <p>Позволяет сохранять некоторое значение произвольного типа 
    с областью видимости &quot;приложение&quot; на время существования приложения. 
    Для обращения к значению каждому значению присваивается   уникальное   имя.   
    Значение   автоматически уничтожается при уничтожении сессии. Значения встроенных 
    объектов   таким   образом   сохранять   нельзя,   т.е.   строка 
    Application.Value(&quot;varl&quot;,Response) является ошибочной.</p>
  <p align=left style='text-align:left;
'><b>Пример:</b></p>
  <p align=left style='text-align:left;'>Application.Value(&quot;ИмяПриложения&quot;,&quot;Торговый 
    зал&quot;) ;</p>
  <p align=left style='text-align:left;'>Response.Write(Session.Value(&quot;ИмяПриложения&quot;)) 
    ;</p>
</body>
</html>
