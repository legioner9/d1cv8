<html>
<head>
<title>1С-Предприятие. Документация | Вопросы архитектуры системы 1С:Предприятие</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<link rel="stylesheet" type="text/css" href="../../../1c.css">
<script language="JavaScript">
<!--
 var bV=parseInt(navigator.appVersion);
 NS4=(document.layers) ? true : false;
 IE4=((document.all)&&(bV>=4))?true:false;
 ver4 = (NS4 || IE4) ? true : false;

 function expandIt()
  { return }

//-->
</script>
<script language="JavaScript1.2">
<!--
 isExpanded = false;

 function initIt()
  { tempColl = document.all.tags("DIV");
    for (i=0; i<tempColl.length; i++)
     { if (tempColl(i).className == "child") tempColl(i).style.display = "none";
     }
  }

 function expandIt(el)
  { if (!ver4) return;
    expandIE(el);
  }

 function expandIE(el)
  { whichEl = eval(el + "child");
//    whichIm = eval(el + "Image");
    if (whichEl.style.display == "none")
     { whichEl.style.display = "block";
//       whichIm.src = "images/st.gif";
     }
    else
     { whichEl.style.display = "none";
//       whichIm.src = "images/std.gif";
     }
  }

 with (document)
  { write("<STYLE TYPE='text/css'>");
    write(".child {display:none}")
    write(".childo{display:block}")
    write("</STYLE>");
  }

 onload = initIt;

//-->
</script>
<style type="text/css">
<!--
.MsoToc2{
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:20.0pt;
	margin-bottom:.0001pt;
	font-size:9pt;; font-weight: bold}
.MsoToc3{
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:40.0pt;
	margin-bottom:.0001pt;
	font-size:9.0pt;
	font-style:italic;}
.MsoToc4{
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:60.0pt;
	margin-bottom:.0001pt;
	font-size:9.0pt;
	font-family:"Times New Roman";}
.MsoToc5{
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:80.0pt;
	margin-bottom:.0001pt;
	font-size:9.0pt;
	font-family:"Times New Roman";}

.parent {  }
.MsoToc1 {  font: bold 12pt "Times New Roman", Times, serif}
h1 {  font-size: 16pt; font-weight: bold}
h2 {  font-size: 14pt; font-style: italic; font-weight: bold}
h3 {  font-size: 12pt; font-weight: bold}
h4 {  font-size: 10pt; font-weight: bold; font-style: italic}
h5 {  font-size: 9pt; font-style: italic; font-weight: bold}
-->
</style>
</head>
<body background="../../../images/background_main.gif">
<h1><a name="_Toc503983443">Вопросы 
  архитектуры системы 1С:Предприятие</a> </h1>
<hr>
<p class=MsoToc2 style='tab-stops:right dotted 481.45pt'><a href="#_toc503983444">Принципы 
  организации регистров оперативного учета</a><o:p></o:p></p>
<p class=MsoToc2 style='tab-stops:right dotted 481.45pt'><a href="#_toc503983445">Компоненты 
  &quot;Бухгалтерский учет&quot; и &quot;Оперативный учет&quot; </a><a href="#_toc503983446">Отличия 
  и особенности использования.</a><o:p></o:p></p>
<p class=MsoToc2 style='tab-stops:right dotted 481.45pt'><a href="#_toc503983447">Проведение 
  документов</a><o:p></o:p></p>
<p class=MsoToc2 style='tab-stops:right dotted 481.45pt'><a href="#_toc503983448">Особенности 
  проведения документов оперативного учета</a><o:p></o:p></p>
<p class=MsoToc2 style='tab-stops:right dotted 481.45pt'><a href="#_toc503983449">Принципы 
  организации бухгалтерских операций и проводок</a><o:p></o:p></p>
<p class=MsoToc2 style='tab-stops:right dotted 481.45pt'><a href="#_toc503983450">Запросы</a><o:p></o:p></p>
<p class=MsoToc3 style='tab-stops:right dotted 481.45pt'><a href="#_toc503983451">Терминология 
  и обозначения</a><o:p></o:p></p>
<p class=MsoToc3 style='tab-stops:right dotted 481.45pt'><a href="#_toc503983452">Введение</a><o:p></o:p></p>
<p class=MsoToc4 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983453">С чего начать</a><o:p></o:p></p>
<p class=MsoToc5 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983454">Начнем с начала</a><o:p></o:p></p>
<p class=MsoToc5 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983455">Постановка задачи</a><o:p></o:p></p>
<p class=MsoToc5 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983456">Формирование текста запроса</a><o:p></o:p></p>
<p class=MsoToc4 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983457">Что происходит внутри</a><o:p></o:p></p>
<p class=MsoToc5 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983458">Как текст запроса превращается 
  в выборку?</a><o:p></o:p></p>
<p class=MsoToc4 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983459">Проверка синтаксиса</a><o:p></o:p></p>
<p class=MsoToc5 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983460">Правильность написания текста</a><o:p></o:p></p>
<p class=MsoToc5 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983461">Объявление внутренних переменных 
  запроса</a><o:p></o:p></p>
<p class=MsoToc5 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983462">Оператор Период С</a><o:p></o:p></p>
<p class=MsoToc5 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983463">Оператор Условие</a><o:p></o:p></p>
<p class=MsoToc5 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983464">Оператор Группировка</a><o:p></o:p></p>
<p class=MsoToc5 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983465">Оператор Функция</a><o:p></o:p></p>
<p class=MsoToc4 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983466">Создание таблицы выборки</a><o:p></o:p></p>
<p class=MsoToc5 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983467">Формат хранения временных файлов</a><o:p></o:p></p>
<p class=MsoToc5 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983468">Структура записи таблицы выборки</a><o:p></o:p></p>
<p class=MsoToc4 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983469">Накопление данных</a><o:p></o:p></p>
<p class=MsoToc3 style='tab-stops:right dotted 481.45pt'><a href="#_toc503983470">Использование 
  граф отбора</a><o:p></o:p></p>
<p class=MsoToc3 style='tab-stops:right dotted 481.45pt'><a href="#_toc503983471">Особенности 
  использования запросов</a><o:p></o:p></p>
<p class=MsoToc3 style='tab-stops:right dotted 481.45pt'><a href="#_toc503983472">Методы 
  оптимизации запросов</a><o:p></o:p></p>
<p class=MsoToc4 style='tab-stops:right dotted 481.45pt'><a
href="#_toc503983473">Общие положения написания запросов</a><o:p></o:p></p>
<p class=MsoToc3 style='tab-stops:right dotted 481.45pt'><a href="#_toc503983474">Особенности 
  использования запросов для получения информации из справочников</a></p>
      
<p class=MsoToc2 style='tab-stops:right dotted 481.45pt'><o:p></o:p></p>
<h2><a name="_Toc503983444">Принципы организации регистров оперативного учета</a></h2>
<p>Определенная сложность освоения механизма регистров объясняется тем, что в 
  отличии от проводок бухгалтерского учета, регистры оперативного учета не имеют 
  аналогов в ручном учете и являются специфической моделью учета 1С:Предприятия.</p>
<p>В этом разделе приводятся разъяснения об организации механизма Регистров , 
  являющихся основой компоненты 1С:Предприятия &quot;Оперативный учет&quot;. Правильное 
  понимание модели учета, поддерживаемой Регистрами необходимо для разработки 
  конфигураций с использованием этой компоненты.</p>
<p>Прежде всего, следует различать использование регистров остатков и оборотных 
  регистров. Не смотря на единство основных принципов, по своему назначению они 
  существенно различаются.</p>
<p>                             Регистры остатков</p>
<p>Регистр остатков - это объект, предназначенный для учета наличия исчисляемых 
  ресурсов в разрезе некоторого набора измерений. Ресурсами могут являться любые 
  исчисляемые величины, такие как: &quot;количество товара&quot;, &quot;долг клиента&quot;, 
  &quot;сумма наличных&quot; и т.п. Измерения Регистра остатков – это оси координат, 
  на пересечении которых Регистр остатков хранит конкретные значения ресурсов. 
  В качестве измерений могут выступать любые значения, характеризующие конкретные 
  значения ресурсов, например, &quot;материал&quot;, &quot;место хранения&quot;, 
  &quot;организация&quot;.</p>
<p>Приведем пример регистра остатков. Допустим, у нас есть Регистр &quot;ОстаткиТоваров&quot;, 
  измерениями этого регистра являются: &quot;Товар&quot;, &quot;Склад&quot;, &quot;МОЛ&quot;. 
  Регистр имеет один ресурс - &quot;Количество&quot;. Содержание данного Регистра 
  можно представить в виде следующей таблицы, где по каждому конкретному товару 
  на конкретном складе за конкретным МОЛ числится определенное Количество товара.</p>
<p>На рисунке приведена логическая схема хранения текущих остатков регистра &quot;ОстаткиТоваров&quot;.</p>
<p><img src="img/img009.gif" width="269" height="336"></p>
<p>Под термином &quot;остаток&quot; ресурса следует понимать числовое значение, 
  которое содержит величину ресурса на какой-то момент времени.</p>
<p>Для каждого регистра в информационной базе система хранит остатки на некоторые 
  моменты времени  и все движения по данному регистру.</p>
<p>Управление регистрами остатков осуществляется записью движений прихода и расхода 
  в процессе проведения документа. Каждое движение содержит значения всех измерений 
  и  тех ресурсов, которые изменяются в данном движении.Алгебраическая сумма значений 
  ресурсов имеющихся движений приходов и расходов и определяет состояние остатков, 
  причем эти итоги формируются отдельно по каждой используемой комбинации значений 
  измерений. Приведем пример движений регистра и остатков, которые получаются 
  на основании этих движений:</p>
<p><b>Движения</b></p>
<p><img src="img/img001.gif" width="343" height="318"></p>
<p><b>Остатки</b></p>
<p><img src="img/img002.gif" width="266" height="238"></p>
<p>С помощью выполнения запроса или последовательного обхода движений можно получить 
  различную информацию о суммах движений за некоторый период или детальных движениях. 
  Итоги, хранимые  регистром, предназначены для выдачи информации об остатках 
  на определенный момент времени. Например, итоги</p>
<p>регистра &quot;ОстаткиТоваов&quot; позволяют ответить на вопрос: &quot;сколько 
  данного товара на этом конкретном складе числится за определенным материально-ответственным 
  лицом&quot;.</p>
<p>Состав измерений регистров определяет максимальную детализацию хранения остатков. 
  Разумеется, с помощью запросов можно &quot;свернуть&quot; остатки, получив их 
  с меньшей детализацией. Свертка может производиться по любой комбинации измерений. 
  Приведем некоторые варианты свертки регистра &quot;ОстаткиТоваров&quot;.</p>
<p><b>Свертка по МОЛ.</b></p>
<p><img src="img/img003.gif" width="213" height="267"></p>
<p><b>Свертка по складу и МОЛ.</b></p>
<p><img src="img/img004.gif" width="174" height="165"></p>
<p><b>Свертка по товару и складу. </b></p>
<p><img src="img/img005.gif" width="177" height="170"></p>
<p>При проектировании регистра остатков следует придерживаться следующих правил:</p>
<p>Состав измерений регистра должен быть таковым, что для каждой единицы ресурса 
  в конкретный момент времени можно однозначно определить значения всех измерений. 
  В приведенном примере это означает, что каждая единица количества товара в конкретный 
  момент располагается на некотором складе и при этом записана за определенным 
  материально-ответственным лицом.</p>
<p>Движения регистров, выполняемые документами по регистру остатков должны выполнять 
  как приход, так и расход по каждому используемому сочетанию значений измерений. 
  Это означает, что нельзя допускать ситуации, когда в конфигурации предусматривается, 
  например, запись движений прихода по некоторому сочетанию измерений регистра 
  остатков и не предусматривается движений расхода по данному сочетанию значений 
  измерений. Разумеется, приходы и расходы могут выполняться совершенно разными 
  документами и в разные моменты времени, но сам принцип регистра остатков подразумевает 
  то, что регистр отражает некоторый баланс наличия средств которые приходуются 
  и расходуются. Причем данное правило должно выполняться для всех ресурсов регистра. 
  В противном случае остатки регистра будут постоянно переноситься из периода 
  в период и его использование будет неэффективным.</p>
<p>Кроме измерений и ресурсов в движениях регистров могут располагаться реквизиты. 
  Они никак не влияют на расчет остатков. Реквизиты предназначены для указания 
  в движениях некоторой дополнительной информации о выполненном движении. Например, 
  при расходовании товара может указываться вид продажи (наличный или безналичный). 
  Этот признак никак не влияет на остатки товаров, но может использоваться, например, 
  для анализа структуры продаж.</p>
<p>Заметим, что если некоторое числовое значение является характеристикой движения 
  регистра, и вы хотите получать по нему отчеты  с суммами данного значения по 
  движениям, но оно не имеет физического смысла в качестве остатка, то его следует 
  вводить в структуру регистра в качестве реквизита, а не в качестве ресурса. 
  Например, если при расходовании товара, мы хотим отразить сумму НДС, выделенную 
  при продаже, но эта сумма не должна храниться в регистре в качестве остатка 
  (так как мы не планируем вести учет остатков по НДС), то ее нужно ввести в структуру 
  регистра в качестве реквизита.</p>
<p>Из описанных выше правил вытекает то, что регистр остатков фактически используется 
  для организации некоторой замкнутой системы учета. Причем в определенной ситуации 
  может существовать потребность в двух и более системах учета одних и тех же 
  объектов предметной области. В этом случае создается более чем один регистр. 
  Типичным примером использования нескольких регистров для учета одних и тех же 
  объектов может служить учет складских запасов и резервирования товаров для тех 
  случаев, когда резервирование выполняется не с конкретного склада, а от лица 
  всей фирмы. При этом фактически ведется два учета - учет наличия товаров на 
  складах и учет зарезервированных товаров по клиентам или конкретным счетам. 
  На рисунке приведен пример такой структуры регистров.</p>
<p>Пример структуры регистров для учета товаров:</p>
<p><b>Регистр &quot;НаличиеТоваров&quot;</b></p>
<p><img src="img/img006.gif" width="307" height="80"></p>
<p><b>Регистр &quot;РезервыТоваров&quot;</b></p>
<p><img src="img/img007.gif" width="244" height="80"></p>
<p>Разумеется, в этом случае идентичность количественных остатков по товарам в 
  обоих регистрах должна обеспечиваться синхронной записью движений по этим регистрам 
  при проведении документов.</p>
<p>Для регистров остатков система обеспечивает хранение рассчитанных итогов и 
  их динамическое обновление при любых действиях с движениями (записи движений, 
  отмены проведения документов,  удалении документов). Итоги хранятся системой 
  на текущий момент (точку актуальности) и на границы предыдущих периодов. В качестве 
  периода может выступать месяц, пятнадцать дней, декада и пять дней. Хранение  
  текущих итогов позволяет системе выполнять быстрый доступ к итогам при проведении 
  документов в реальном времени и для получения оперативных отчетов. Однако с 
  помощью запросов или временных расчетов регистров существует возможность обращения 
  к итогам на любой момент (любую дату или позицию документа). Для того, чтобы 
  в этом случае не обрабатывать все существующие движения система использует хранимые 
  итоги ближайшей границы периода и обрабатывает только движения от начала периода 
  до указанного момента. Соответственно периодичность хранения определяет среднее 
  время получения итогов на некоторый момент.</p>
<p>Чем меньше периодичность,  тем меньше будет среднее время, но больше объем 
  хранимой информации, и, соответственно, наоборот. Периодичность хранения итогов 
  устанавливается в режиме управления оперативными итогами в режиме запуска &quot;1С:Предприятие&quot; 
  и никак не влияет на функциональность системы, за исключением времени обращения 
  к итогам на различные моменты и необходимости выполнения открытия периодов.</p>
<p>                            Оборотные регистры</p>
<p>В отличие от регистров остатков оборотные регистры призваны накапливать некоторые 
  специфические итоги в разрезе периодов. То есть, ресурс оборотного регистра 
  накапливает некоторую сумму за период. При этом значения измерений оборотного 
  регистра детализируют накапливаемую сумму.</p>
<p>Примером оборотного регистра может служить регистр &quot;ПродажаТоваров&quot;. 
  Данный регистр учитывает объем продаж в разрезе товаров и клиентов.</p>
<p>На рисунке приведена логическая схема хранения итогов регистра  &quot;ПродажаТоваров&quot;.</p>
<p><img src="img/img008.gif" width="334" height="287"></p>
<p>Фактически итоги этого регистра позволяют ответить на вопрос &quot;Сколько 
  за определенный период продано данного товара конкретной организации&quot;. 
  Разумеется, как и в случае регистра остатков, итоги оборотного регистра могут 
  быть свернуты для получения данных с меньшей детализацией.</p>
<p>Таким образом, оборотный регистр может использоваться для накопления некоторых 
  итогов в нескольких разрезах. В отличии от регистров остатков управление оборотным 
  регистром осуществляется только одним видом движения, так как для оборотного 
  регистра не имеет смысла понятия &quot;приход&quot; и &quot;расход&quot;. Если, 
  например, требуется получить данные и по продажам и по закупкам товаров, то 
  можно либо создать два регистра, либо сделать два ресурса в одном регистре &quot;Продано&quot; 
  и &quot;Закуплено&quot;.</p>
<p>При создании конфигураций использование оборотных регистров обычно менее необходимо, 
  чем регистров остатков. Часто, ту же информацию, которую можно получать из оборотного 
  регистра, можно получить с помощью запроса из документов или из движений регистра 
  остатков аналогичной структуры. Однако оборотный регистр позволяет получить 
  накопленные данные с установленной периодичностью практически мгновенно, тогда, 
  как получение их из движений или документов может потребовать значительных затрат 
  времени. Вопрос о целесообразности использования оборотного регистра с точки 
  зрения оптимизации должен решаться исходя из частоты выполняемых запросов и 
  требований к их производительности.</p>
<p>Однако, одним из решающих аргументов для создания оборотного регистра может 
  являться необходимость записывать в его движениях некоторый факт, который однозначно 
  не содержится ни в документах, ни в движениях других регистров. В этом случае 
  фиксация данного факта при проведении документа в оборотном регистре носит не 
  оптимизационный характер, а является частью логики учетной схемы.  Например, 
  если  в документе указываются комплекты товаров, а нам нужно получать отчеты 
  по детальным продажам различным клиентам товаров входящих в комплекты, то использование 
  оборотного регистра позволит при проведении документа сформировать движения 
  с указанием организации - покупателя и конкретных товаров, входящих в купленные 
  комплекты. Далее с помощью запросов мы сможем получить необходимую нам информацию 
  о том, какой клиент, каких товаров сколько покупал за выбранный период.</p>
<p>Сами итоги оборотного регистра всегда хранятся и выдаются (объектом типа &quot;Регистр&quot;) 
  с детализацией до того периода, который задается в метаданных. Однако при выполнении 
  запроса можно получить итоги и с любой другой периодичностью. Для оборотных 
  регистров хранение итогов позволяет системе достаточно быстро формировать запросы 
  по данному регистру за длительный интервал в разрезе той же периодичности, что 
  и период оборотного регистра. Например, если периодичность регистра в метаданных 
  выбрана - месяц, то запрос будет достаточно эффективно формировать итоги за 
  два, три месяца и т.д. Обращение к итогам, например, за неделю потребует обработки 
  движений регистра. Однако хранение итогов с маленькой периодичностью потребует 
  достаточно больших ресурсов с точки зрения используемого дискового пространства.</p>
<p>         Хронологический порядок документов и Точка Актуальности.</p>
<p>Для оперативного учета очень важной особенностью системы хранения документов 
  1С:Предприятия является то, что все документы (документы всех видов) располагаются 
  в едином хронологическом порядке. Фактически он отражает последовательность 
  событий хозяйственной жизни предприятия. Позиция документа в общей последовательности 
  определяется его датой, временем, а также некоторой дополнительной величиной, 
  которая устанавливает порядок документов с одинаковым временем в одной дате. 
  Эта величина не регулируется пользователем, но система гарантирует ее неизменность. 
  То есть, гарантируется, что при любых загрузках, выгрузках, перезаписях документы 
  будут всегда находиться в одной и той же последовательности относительно друг 
  друга, кроме случаев, когда у них редактируется дата или время. Заметим, что 
  время документа служит в основном для упорядочивания их внутри даты и его связь 
  с астрономическим временем весьма условна. То есть при изменении времени документа, 
  для логики работы системы важна на сама смена значения времени, а изменение 
  порядка документов.</p>
<p>Для компоненты &quot;Оперативный учет&quot; принципиальным понятием является 
  &quot;Точка Актуальности&quot; (далее ТА). Вкратце ТА можно определить как точку 
  на оси последовательности документов. Она может указывать на конкретный документ, 
  или нет (например, если документ, на который она была установлена - удален), 
  но она всегда выступает в качестве позиции на оси документов и любой документ 
  в системе однозначно располагается либо до ТА, либо на ТА, либо после ТА. Точка 
  актуальности является моментом, на который регистры содержат текущие значения 
  всех ресурсов. Другими словами, если просто запросить у регистра значение какого 
  либо ресурса, то он выдаст его именно на момент ТА. Если нам необходимо значение 
  ресурса на прошедший момент времени, то надо либо сдвинуть в прошлое ТА (для 
  этого используется операция &quot;Управления итогами&quot;), либо при помощи 
  средств встроенного языка запустить &quot;временный расчет&quot; регистра.</p>
<p>Для регистров остатков итоги на ТА фактически отражают взаимоотношение приходов 
  и расходов ресурса по каждому сочетанию измерений с момента начала ведения учета 
  до момента ТА.</p>
<p>Для оборотных регистров итоги на ТА отражают накопленную сумму движений с ближайшего 
  начала периода оборотного регистра до ТА. Для приведенного примера оборотного 
  регистра итог на ТА будет означать количество проданного товара конкретному 
  клиенту с начала месяца.</p>
<p>При нормальной работе Точка актуальности передвигается вперед в процессе последовательного 
  проведения документов. Так как для регистров остатков итоги хранятся не только 
  на текущий момент (то есть на ТА), но и на границы периодов (месяца, пятнадцати, 
  десяти или пяти дней), то для проведения документа относящегося к следующему 
  периоду необходимо выполнить открытие периода или перенос ТА на следующий период 
  (эти действия однозначны). При этом система фиксирует хранимые остатки прошлого 
  периода и инициализирует текущие остатки в новом периоде.</p>
<h2><a name="_Toc503983445">Компоненты &quot;Бухгалтерский учет&quot; и &quot;Оперативный 
  учет&quot;</a></h2>
<h2><a name="_Toc503983446">Отличия и особенности использования.</a></h2>
<p>В системе программ 1С:Предприятие существует две функциональные компоненты 
  используемые для автоматизации учета наличия и движения средств. Это компоненты 
  &quot;Оперативный учет&quot; и &quot;Бухгалтерский учет&quot;. Достаточно часто 
  у специалистов занимающихся созданием и внедрением прикладных решений на базе 
  1С:Предприятия возникают вопросы связанные с сопоставлением функциональных возможностей 
  этих компонент, а также их позиционированием. В этом разделе мы постараемся  
  объяснить принципиальные различия этих двух компонент и дать рекомендации по 
  их применению.</p>
<p><b>                        Основные принципы компонент</b></p>
<p>В начале приведем основные  принципы,  заложенные  в  эти компоненты.</p>
<p>Компонента &quot;Оперативный учет&quot; основана на механизме  регистров. Регистр  
  представляет собой многомерную систему учета наличия и движения средств. В конфигурации 
  определяется набор независимых регистров. Каждый из них имеет собственную структуру, 
  включающую набор измерений, образующих многомерную систему координат и набор 
  ресурсов, определяющих состав собственно исчисляемых значений.  При помощи регистров 
  в конфигурации организуется достаточно сложный учет по конкретным разделам  
  экономической    деятельности   предприятия.   Причем  структура регистров описывается 
  в точном соответствии  с  необходимостью детализации по конкретным разделам 
  учета .  Например, для учета товаров минимально достаточно одного  измерения  
  -  собственно &quot;номенклатуры товаров&quot;.  Дополнительно можно разделить 
  учет по нескольким складам - тогда добавляется измерение &quot;склад&quot;, 
  можно ввести  разделение  по  материально-ответственным  лицам - ввести измерение 
  &quot;МОЛ&quot;.  Если ввести партионный учет, то  будет добавлено измерение 
  &quot;Партия&quot;. Состав измерений будет полностью определяться потребностями 
  данного раздела учета.  В некоторых случаях  для учета товаров может быть введено 
  два регистра, то есть учет товаров будет вестись  в  двух  системах  координат.  
  Например,  в  этом может возникнуть необходимость,  если нужно вести независимый 
  учет  резервирования  товаров.  Поясним  это подробнее.  Для  любой  единицы  
  учитываемой в регистре должны быть однозначно определены значения всех измерений.  
  Если  резервирование производится не с конкретного склада, а для фирмы в целом 
  , то для учета резервирования следует ввести  отдельный регистр,  который будет 
  учитывать количество зарезервированного товара в разрезе покупателей и счетов 
  на оплату. Таким образом, товары  будут учитываться на одном регистре с точки 
  зрения физического местоположения на  складах,  а  на  другом  с  точки зрения 
  логического распределения по клиентам зарезервированных товаров. Состав ресурсов 
  регистра также полностью определяется требованиями учета.  Например,  товары  
  могу учитываться как в количественном  выражении, так и в учетных ценах, для 
  стоимостной оценки товарного запаса.</p>
<p>Важной особенностью компоненты &quot;Оперативный учет&quot; является ориентация  
  на  поддержку  итогов в актуальном состоянии на текущий момент времени. Компонента 
  &quot;Оперативный учет&quot; поддерживает остатки регистров на &quot;Точку  
  актуальности&quot;,  которая  при повседневной работе соответствует последнему 
  проведенному документу. При проведении документы располагаются в именно порядке 
  проведения, а не в порядке ввода, что обеспечивает четкую последовательность 
  отражения в учете деятельности предприятия.</p>
<p>Доступ к  текущим остаткам регистров осуществляется практически мгновенно.  
  Это позволяет  при  проведении  документов контролировать  наличие товаров на 
  складах,  состояние взаиморасчетов и другие данные именно на момент проведения  
  документов. Мгновенный  доступ  к текущим итогам при проведении документов позволяет 
  исключить одновременное  списание  со  склада одних и тех же товаров разными 
  менеджерами.</p>
<p>Компонента &quot;Бухгалтерский учет&quot; обеспечивает ведение планов счетов, 
  операций,  проводок  и бухгалтерских итогов.  Она ориентирована на  отражение  
  хозяйственной  жизни  предприятия именно в бухгалтерском учете.  То есть, она 
  реализует основные принципы бухгалтерского учета.</p>
<p>Прежде всего, весь учет обязательно ведется в разрезе синтетических счетов 
  .  Все остальные разрезы учета (субсчета, валютный учет,  аналитический учет) 
  выступают, как дополнительные, и могут не использоваться. Учет может вестись 
  в денежном и натуральном выражении. При ведении валютного учета отдельно также 
  учитываются валютные суммы.</p>
<p>Вся информации о движении средств отражается в проводках.  Все проводки имеют 
  одинаковую структуру, а состав данных в них определяется  настройками учета 
  корреспондирующих счетов.  Так для счета может быть определено до 5  разрезов  
  аналитического учета.  Соответственно значения объектов аналитики в проводках 
  будут заполнены в том объеме, который определен для конкретного  счета. Многомерность 
  аналитики позволяет,  например,  для счета 10 (материалы) организовать учет 
  в разрезе номенклатуры, мест хранения и материально-ответственных лиц.</p>
<p>Так как одним из основных принципов  бухгалтерского учета является принцип 
  двойной записи,  проводка  имеет  дебетовую  и кредитовую часть. В некоторых 
  случаях одна из частей может быть не заполнена,  например, при использовании 
  забалансовых счетов.</p>
<p>Система хранения  бухгалтерских  итогов  ориентирована на быстрое получение 
  итогов с детализацией  до  месяца,  то  есть данных об  остатках на начало месяца,  
  оборотах за месяц, остатках на конец месяца,  а также по любым периодам,  состоящим 
  из целых месяцев.  Получение итогов может производиться за любой интервал и 
  на любой момент времени,  но это выполняется системой за счет дополнительной 
  обработки проводок.</p>
<p><b>              Сопоставление средств и возможностей компонент</b></p>
<p>Теперь сопоставим средства, используемые этими компонентами, и возможности, 
  которые они предоставляют.</p>
<p>На первый взгляд компоненты &quot;Бухгалтерский учет&quot; и  &quot;Оперативный 
  учет&quot;  решают практически одну и ту же задачу, но разными способами.  На 
  самом деле  различия  между  ними  весьма существенные.</p>
<p>Первое отличие компонент заключается в механизме  отражения информации о движении 
  средств. В компоненте &quot;Бухгалтерский учет&quot; основным разрезом учета 
  являются синтетические счета, которые и  определяют бухгалтерскую модель отражения 
  хозяйственной деятельности предприятия.  В компоненте &quot;Оперативный учет&quot; 
  механизм регистров является более универсальным средством и не имеет предопределенных 
  разрезов учета.</p>
<p>Многомерный аналитический  учет в 1С:Бухгалтерии действительно позволяет так 
  же как и регистры оперативного учета хранить  данные  о  движении средств и 
  получать итоги в различных разрезах.  Однако он предназначен для  детализации  
  итогов  по синтетическим счетам.  Тогда,  как регистры оперативного учета представляют 
  собой самостоятельную универсальную модель многомерного учета.</p>
<p>Использование аналитики в бухгалтерском учете в сравнении с регистрами менее 
  гибко и менее эффективно при  сложном учете и большом  объеме  информации.  
  Это определяется единообразным хранением всех проводок. Устройство регистров 
  позволяет максимально точно отразить в них требуемую схему учета по  конкретным 
  разделам,  что  обеспечивает наиболее эффективное хранение и использование информации. 
  Кроме того, при использовании версий 1С:Предприятия для SQL механизм регистров 
  более эффективно оптимизируется системой за счет того, что структура хранения 
  информации регистров более точно соответствует типовым структурам баз данных, 
  чем универсальные структуры используемые для хранения данных о</p>
<p>бухгалтерских проводках и итогах.</p>
<p>Механизм регистров  не  использует понятие &quot;двойной записи&quot;, так 
  как оно предназначено именно для бухгалтерского  учета, то  есть для отражения 
  финансового состояния предприятия в денежном выражении как с точки зрения наличия 
  средств, так и с точки зрения источников финансирования и финансовых обязательств.</p>
<p>Другим различием механизмов бухгалтерского и оперативного учета в  1С:Предприятии  
  является распределение во времени совершения хозяйственных операций на предприятии 
  и  отражения их в учете. Работа бухгалтерии, как правило, ведется &quot;по факту&quot;. 
  То есть в бухгалтерию поступает информация о совершенных операциях, которая 
  отражается в бухгалтерском учете. Причем это может производиться со значительным 
  запозданием.  То есть  бухгалтер заносит данные о совершении хозяйственных операций,  
  как летописец освещает произошедшие события.  Соответственно  компонента &quot;Бухгалтерский  
  учет&quot;  ориентирована на ввод операций за любые даты и быстрое получение 
  итогов с детализацией  по  месяцам  и кварталам,  что  весьма необходимо для 
  составления отчетности.</p>
<p>Компонента &quot;Оперативный учет&quot; напротив предназначена для отражения  
  хозяйственных операций в основном непосредственно в момент их совершения, то 
  есть в реальном времени. Понятие &quot;точки актуальности&quot;  (текущего момента) 
  позволяет не просто отражать в учете операции в момент их совершения,  но и 
  выполнять  различного рода контрольные действия по определению правомерности 
  совершения операций (контроль наличия товаров, состояния взаиморасчетов).  Для  
  этого  в механизме регистров оптимизировано получение итогов именно на текущий 
  момент,  то есть на  момент совершения хозяйственной операции.  Разумеется, 
  существует возможность изменения уже введенной информации и ввода информации 
  &quot;задним числом&quot;, но она используется в основном как исключение, для 
  исправления ошибочно введенных ранее данных.</p>
<p>Важным аспектом для понимания разницы между бухгалтерским и оперативным  учетом 
  в 1С:Предприятии является тот факт,  что устройство операций и проводок в бухгалтерском 
  учете  ориентировано на непосредственную работу с ними конечного пользователя.  
  Бухгалтер понимает, как устроен учет на уровне синтетических  счетов,  аналитики,  
  проводок и итогов.  Он может вводить проводки вручную,  может настраивать ведение 
  учета,  может самостоятельно интерпретировать проводки, записанные документами 
  и</p>
<p>стандартные отчеты.  Таким образом бухгалтерский учет в  1С:Предпрятии  реализован  
  понятными бухгалтеру категориями (&quot;счет&quot;,  &quot;субсчет&quot;, &quot;аналитика&quot;, 
  &quot;валюта&quot;,  &quot;проводка&quot;).</p>
<p>Регистры оперативного учета выступают в качестве внутреннего механизма,  который 
  используется при конфигурировании  системы.  Пользователь  (продавец,  менеджер)  
  не посвящается в подробности реализации учета.  Он работает с документами и 
  отчетами,  а механизм регистров,  который при этом фактически используется, 
  обеспечивает получение необходимой информации, но скрыт в конфигурации.  При 
  использовании механизмов  оперативного учета конечному пользователю не предоставляется 
  универсальных</p>
<p>средств отражения операций  в  регистрах  и получения  отчетов.  Все предусмотренные 
  варианты движения регистров и получения итогов описаны в конфигурации в виде 
  документов  и  отчетов  и предназначены для вполне конкретного использования. 
  Например, для отражения движений товаров вводится несколько видов документов  
  (накладных,  требований),  а  для получения итогов один или несколько отчетов 
  (материальная  ведомость,  карточка товара  и  т.д.).  Работа  пользователя 
  с бухгалтерским учетом предусматривает как специализированные режимы (документы,  
  отчеты) ориентированные  на конкретные разделы учета,  так и универсальные средства  
  отражения  любых  хозяйственных  операций (операции вводимые вручную,  типовые 
  операции) и универсальные средства получения итогов по любым разделам учета 
  (стандартные отчеты).</p>
<p>Заметим также,  что конфигурирование механизма  регистров обычно выполняется  
  специалистами по автоматизации,  тогда как конфигурирование компоненты &quot;Бухгалтерский 
  учет&quot;  в категориях понятных бухгалтеру  позволяет выполнять настройку 
  учета и специалисту имеющему экономическое  образование и небольшие навыки работы 
  с компьютером.  Такое различие объясняется тем,  что сам механизм бухгалтерского 
  учета существовал фактически как  некоторая универсальная математическая модель 
  со времен Луки Почиоли,  еще задолго до появления компьютеров и знаком бухгалтеру, 
  тогда как регистры оперативного учета являются специфическим механизмом 1С:Предпряития.</p>
<p><b>                 Рекомендации по использованию компонент.</b></p>
<p>Теперь постараемся подытожить приведенные отличия  компонент и дать рекомендации 
  по их применению.</p>
<p>Очевидно, что компонента  &quot;Бухгалтерский  учет&quot;  идеально подходит 
  для ведения  синтетического  учета  и аналитического бухгалтерского учета.  
  Мощные возможности аналитического учета позволяют  также использовать ее для 
  ведения управленческого  складского учета, взаиморасчетов,  учета в производстве 
  и т.д.  Все разделы поддерживаются  единым механизмом проводок,  который обеспечивает 
  высокую наглядность отражения в учете операций для  бухгалтера.  Механизм аналитического 
  учета целесообразно использовать в тех случаях, когда он необходим для получения  
  развернутых  итогов по синтетическим  счетам и для составления бухгалтерской 
  и налоговой отчетности.</p>
<p>Компонента &quot;Оперативный  учет&quot; позволяет построить весьма специфичную 
  схему учета в соответствии с  конкретным  разделом учета. Ее целесообразно использовать 
  при сложном  управленческом учете и большом объеме хозяйственных операций.  
  Как правило, она применяется для автоматизации основной деятельности предприятия. 
  Например, в торговле это учет наличия и движения товаров, учет взаиморасчетов 
  с клиентами, а в производстве – учет материалов, выпуска готовой продукции, 
  калькуляции затрат. Гибкая</p>
<p>настройка механизма  регистров  позволяет  эффективно поддерживать сложные 
  виды учета,  например,  учет заказов,  учет товарных кредитов, учет товаров 
  на реализации,  списание по методам LIFO/FIFO и т.д. Компоненту &quot;Оперативный  
  учет&quot; целесообразно также применять в тех случаях,  когда автоматизированную 
  систему предполагается использовать в реальном времени. То есть не только для 
  фиксации в  учете  произошедших  хозяйственных  операций,  но и для получения 
  оперативной информации о текущем состоянии материальных и  денежных  средств, 
  и принятия с помощью программы управленческих решений, например,   обеспечения 
  контроля одновременного доступа к товарным запасам нескольких пользователей.</p>
<p>То есть механизмы компоненты &quot;Бухгалтерский учет&quot; наиболее эффективны 
  именно как средство отражения хозяйственной деятельности в соответствии с требованиями 
  методологии бухгалтерского учета. Средства &quot;Оперативного учета&quot; предназначены 
  не только для отражения, но и для управления собственно совершением хозяйственных 
  операций.</p>
<p>Наибольший интерес  представляет совместное использование компонент. На  практике  
  на предприятии с одной информационной базой могут работать  и  сотрудники  бухгалтерии,  
  и  менеджеры (например, отдел продаж,  коммерческий отдел). Использование в 
  одной конфигурации компонент &quot;Оперативный учет&quot; и &quot;Бухгалтерский 
  учет&quot; позволяет органично совместить работу различных подразделений.  Механизмами  
  оперативного  учета  решаются  задачи собственно управленческого учета,  составляющие 
  основной объем хозяйственных операций на предприятии и ведущихся  в  реальном 
  времени. Средствами оперативного учета  отслеживаются движения товаров, складские 
  запасы, выполняется резервирование, поддерживаются взаиморасчеты с клиентами 
  с учетом кредитов,  консигнации и других особенностей управленческого учета.  
  Все операции, реализуемые компонентой  &quot;Оперативный  учет&quot;  полностью 
  описываются  в  конфигурации,  так  как  персонал, который их оформляет не должен 
  иметь возможность отклонения  от  принятой схемы ведения бизнеса и, как правило, 
  не осведомлен об особенностях реализации учетных регистров.</p>
<p>По данным управленческого учета  могут автоматически формироваться проводки 
  для отражения определенного круга операций в бухгалтерском учете. Причем отражение 
  в бухгалтерском учете  целесообразно выполнять с той степенью подробности, которая 
  необходима для получения бухгалтерской и налоговой отчетности.  То  есть информация 
  о хозяйственных операциях будет &quot;сворачиваться&quot;,  освобождаясь от 
  деталей  несущественных  для бухгалтерского учета.  Например, очевидно, что 
  для бухгалтерии несущественно распределение товаров по складам.  Кроме того,  
  и сама  детализация  по  конкретным товарам также может не отражаться в бухгалтерском 
  учете.  Кроме отражения данных полученных на основании оперативного учета, компонента 
  &quot;Бухгалтерский учет&quot; используется для  автоматизации  самых  разных  
  разделов учета  предприятия  не  имеющих большой нагрузки по количеству операций 
  и не требующих участия программы в управлении операциями. Например, это взаиморасчеты 
  с подотчетными лицами, учет основных средств и т.д.  Разумеется, компонента 
  &quot;Бухгалтерский учет&quot; используется также для  определения  финансовых  
  результатов, составления бухгалтерской и налоговой отчетности. В отличии от 
  оперативного учета компонента  &quot;Бухгалтерский  учет&quot; допускает  ручной 
  ввод операций.  Это возможно благодаря тому, что бухгалтер владеет понятиями,  
  которыми оперирует программа (счет,  аналитика, проводка и т.д.). Возможность 
  ручного ввода операций позволяет отражать разовые операции, не предусмотренные 
  конфигурацией,  что зачастую проще и эффективнее, чем внесение изменений в конфигурацию.</p>
<p>Таким образом определяющими факторами для выбора  используемых  компонент 1С:Предприятия 
  для автоматизации учета в конкретной организации является состав задач, круг 
  пользователей, и режим отражения в учете хозяйственных операций. Если систему 
  предполагается использовать только в бухгалтерии для занесения данных о хозяйственных  
  операциях  и  получения  внутренней  и внешней отчетности,  то достаточно применения 
  компоненты &quot;Бухгалтерский учет&quot;.  Если  предполагается автоматизировать 
  исключительно управленческий  учет (работу менеджеров по управлению закупками,  
  продажами,  складскими запасами, взаиморасчетами), то  целесообразно  использовать 
  только компоненту &quot;Оперативный учет&quot;. Если предполагается автоматизировать 
  оба этих направления во  взаимосвязи,  то  следует  задействовать и ту и другую 
  компоненту в единой конфигурации.</p>
<h2><a name="_Toc503983447">Проведение документов</a></h2>
<p>При проектировании конфигурации 1С:Предприятия весьма важным моментом для понимания 
  является процесс проведения документа.</p>
<p>Фактически документ в системе 1С:Предприятие являются объектом отражающим в 
  информационной базе  некоторое событие произошедшее в хозяйственной жизни предприятия 
  (оприходование товара, получение денег от покупателя, оформление отпуска сотруднику, 
  переоценка валютных остатков и т.д.). Структура данных документа должна отражать 
  различные характеристики конкретного  события. Документы, как объекты прикладной 
  задачи, тесно связаны с различными учетными механизмами 1С:Предприятия. Причем 
  эта связь проявляется именно в процессе проведения документа. Некоторые документы 
  вообще могут не использовать механизм проведения. В этом случае они используются 
  просто как средство регистрации события и печати формы первичного документа. 
  Для таких документов, рекомендуется отключить признак проведения в свойствах 
  документа в метаданных. Однако для большинства видов документов выполняется 
  проведение для того, чтобы отразить событие в различных учетных механизмах 1С:Предприятия.</p>
<p>При проведении документа сама система только помечает его как проведенный. 
  Собственно все действия документа при проведении описываются в конфигурации 
  в модуле документа в процедуре &quot;ОбработкаПроведения&quot; на встроенном 
  языке. В принципе в этой процедуре можно описать практически любые изменения 
  в информационной базе. Однако механизм проведения документов предназначен для 
  выполнения вполне определенных действий:</p>
<p>- Запись значений периодических реквизитов справочников, для которых установлена 
  возможность изменения документами;</p>
<p>- Запись движений регистров оперативного учета;</p>
<p>- Запись данных в журнал расчетов;</p>
<p>- Запись бухгалтерских операций и проводок.</p>
<p>Заметим, что все перечисленные действия должны выполняться специальными средствами, 
  ориентированными именно на использование  в процессе проведения документа. Например, 
  запись значения периодического реквизита справочника должна выполняться методом  
  &quot;УстановитьРеквизитСправочника&quot;, а не методами объекта &quot;Периодический&quot;.</p>
<p>Важно понимать, что одной из главных особенностей механизма проведения документа 
  является фиксация всех перечисленных действий и возможность их автоматического 
  аннулирования при отмене проведения документа, при его перепроведении и при 
  удалении документа.</p>
<p>То есть все перечисленные действия записываются в информационную базу с привязкой 
  к документу. Это позволяет не только посмотреть, какой документ выполнил конкретные 
  действия, но и произвести их аннулирование и повторное воспроизведение. Например, 
  если документ при проведении записал бухгалтерскую операцию с проводками то 
  при его перепроведении ранее сформированные проводки автоматически удаляются 
  и вычитаются из бухгалтерских итогов а новые записываются и вновь отражаются 
  в итогах. То есть это позволяет автоматически изменять влияние события отражаемого 
  документом на различные механизмы 1С:Предприятия.</p>
<p>Для механизмов бухгалтерского и оперативного учета действия, выполняемые при 
  проведении документа, не только привязываются к документу, но и используют документ 
  в качестве момента выполнения действий. То есть и для регистров и для бухгалтерских 
  итогов порядок следования документов определяет порядок отражения движений и 
  проводок в учете. Соответственно итоги и оперативного и бухгалтерского учета 
  могут быть получены на момент конкретного документа.</p>
<p>Рекомендуется в алгоритме проведения документа не выполнять иных изменений 
  в информационной базе кроме тех, которые приведены выше. Это объясняется тем, 
  что все остальные действия, выполненные в процессе проведения, не будут привязаны 
  к документу, то есть не будут автоматически аннулироваться при отмене проведения 
  документа или его перепроведении.</p>
<p>Модуль документа может содержать две предопределенные процедуры &quot;ОбработкаПроведения&quot; 
  и &quot;ОбработкаУдаленияПроведения&quot;. В отличии от всех других предопределенных 
  процедур 1С:Предприятия, которые в основном предназначены для специфической 
  обработки интерактивных действий пользователя, эти две процедуры вызываются 
  всегда при выполнении проведения и отмене проведения документа, вне зависимости 
  от того, происходит это интерактивно или из встроенного языка.</p>
<p>Эти процедуры вызываются в автоматически открываемой системой транзакции вместе 
  с собственно проведением и отменой проведения, что позволяет однозначно логически 
  увязать действия, выполняемые в данных процедурах, с самим фактом пометки документа 
  как проведенного и снятия этой пометки.</p>
<p>Следует учитывать, что если в ходе выполнения этих процедур выполняется изменение 
  значений реквизитов документа, то по окончанию выполнения процедуры эти изменения 
  будут записаны. Причем запись будет выполняться в той же транзакции.</p>
<p>Процедура &quot;ОбработкаУдаленияПроведения&quot; выполняется и в случаях удаления 
  и  пометки на удаление документа, то есть при любых случаях, когда отменяются 
  выполненные документом при проведении действия, кроме случая перепроведения 
  документа, так как при проведении выполняется процедура &quot;ОбработкаПроведения&quot;.</p>
<p>Наличие предопределенной процедуры &quot;ОбработкаУдаленияПроведения&quot;, 
  позволяет в отдельных случаях организовать автоматическое аннулирование некоторых 
  дополнительных изменений в информационной базе, которые выполняются в процессе 
  проведения. Однако организация такого алгоритма требует особой аккуратности  
  и хорошего понимания выполняемых действий. В общем случае, рекомендуется выполнять 
  при проведении документа только перечисленные выше изменения в информационной 
  базе, которые система сможет автоматически контролировать при любых действиях 
  с документом. При использовании в процедуре проведения только  специализированных 
  средств изменения информационной базы написания предопределенной процедуры &quot;ОбработкаУдаленияПроведения&quot; 
  не потребуется. В то же время, она может быть создана для контроля правомерности 
  отмены проведения документа.</p>
<p>Таким образом, действия, которые должны быть логически жестко увязаны с проведением 
  документа или отменой проведения нужно размещать именно в процедурах &quot;ОбработкаПроведения&quot; 
  и &quot;ОбработкаУдаленияПроведения&quot; модуля документа, а не в предопределенных 
  процедурах, обрабатывающих, например, интерактивные действия пользователя в 
  журналах документов.</p>
<p>В версии 7.7 введена дополнительная возможность управления процессом проведения. 
  В метаданных свойствах документа может быть отключен автоматический режим удаления 
  движений в процессе проведения и отмены проведения. Отключение режима автоматического 
  удаления движений рекомендуется выполнять в специальных случаях, так как очевидно, 
  что это потребует более сложного написания модулей. Следует заметить, что отключение 
  автоматического режима удаления не нарушает основной концепции проведения документов. 
  Главным отличием этого варианта является то, что появляется возможность в процессе 
  проведения уже проведенного документа записывать движения не &quot;с чистого 
  листа&quot;, а дописывать к созданным при прошлом проведении. А само удаление 
  движений может быть выполнено в процессе перепроведения вызовом специального 
  метода. При отмене проведения, разумеется, движения документа удаляются в любом 
  случае. Разница заключается лишь в том, что при, выключенном  режиме автоматического 
  удаления движений, движения реально удаляются системой не до выполнения предопределенной 
  процедуры &quot;ОбработкаУдаленияПроведения&quot;, а после.</p>
<h2><a name="_Toc503983448">Особенности проведения документов оперативного учета</a></h2>
<p>Проведение документов, относящихся к оперативному учету, имеет ряд особенностей, 
  которые необходимо учитывать, как при создании конфигурации, так и при администрировании 
  работы пользователей. Идеология механизмов компоненты &quot;Оперативный учет&quot; 
  предполагает преимущественно последовательный ввод и проведение документов. 
  Проведение документов &quot;задним числом&quot; должно осуществляться как исключение 
  и обрабатывается системой отдельно.</p>
<p>Рекомендуется изменение и проведение документов задним числом рассматривать 
  в качестве исправления ошибочно введенных или не введенных данных в информационной 
  базе.  То есть изменение и проведение документа задним числом должно производиться 
  с целью приведения информационной базы в соответствие с реально произошедшими 
  событиями, а не внесения произошедших позднее событий в качестве изменений в 
  более ранние документы. Например, если выяснилось, что вчера на складе был оприходован 
  товар, но не была введена соответствующая приходная накладная, то такой документ 
  следует ввести задним числом, так как реально событие уже произошло. Аналогично 
  можно исправить неверно заполненную приходную накладную, если оказалось, что 
  на самом деле товаров было оприходовано больше, чем введено в документе . Если 
  же сегодня осуществляется возврат товара от покупателя, проданного вчера по 
  расходной накладной, то неверным будет исправление введенной расходной накладной 
  (уменьшение количества отпущенного товара с учетом возврата). Заметим, что при 
  этом остаток товаров на складе на утро текущего дня будет неверным. Правильно 
  будет ввести текущей датой  документ, отражающий возврат товара покупателем. 
  В этом случае порядок следования  и содержание документов в информационной базе 
  будет соответствовать последовательности и содержанию событий хозяйственной 
  жизни предприятия и это позволит реально восстановить картину учета на любой 
  момент времени. </p>
<p>Так как запись и проведение документов может выполняться раздельно, в системе 
  предусмотрен механизм обеспечивающий расположение документов не в порядке их 
  записи, а в порядке проведения. Это позволяет обеспечить проведение всех документов 
  в реальном времени, то есть с обращением в процессе проведения к текущим остаткам 
  регистров. Ключевым моментом в этом механизме является точка актуальности (ТА), 
  отражающая обычно позицию последнего проведенного документа, то есть последнее 
  событие в хозяйственной жизни предприятие, зафиксированное в информационной 
  базе.</p>
<p>Соответственно регистры оперативного учета отражают наличие различных средств 
  на этот момент, или точнее &quot;по этот момент&quot;, так как движения документа 
  стоящего на ТА включается в текущие остатки регистров.</p>
<p>В процессе проведения документа пользователем из формы документа система распознавая 
  возможность появления конфликтных ситуаций, выдает пользователю сообщения-запросы, 
  чтобы корректно разрешить возможный конфликт. Таких ситуаций может быть три: 
</p>
<ul>
  <li>дата проводимого документа меньше даты ТА (документ проводится задним числом);</li>
  <li>после нового документа существуют проведенные документы (документ проводится 
    той же датой, что и дата ТА, но время нового документа меньше времени ТА);</li>
  <li>существуют  более ранние проведенные документы (новый документ проводится 
    за ТА, но между новым документом и ТА уже есть ранее проведенные документы).</li>
</ul>
<p>Рассмотрим подробнее эти ситуации. На приведенных ниже схемах обозначена ось 
  времени с отметками моментов перехода на новую дату, времени Точки</p>
<p>Актуализации (<b>ТА</b>), времени ввода нового документа ( Новый документ ).</p>
<p>Значком <img src="img/image267.gif" width="24" height="25">на схемах обозначены 
  существующие проведенные документы.</p>
<p>Значком<img src="img/image268.gif" width="26" height="26">на схемах обозначены  
  новые документы,  которые проводятся.</p>
<p>Значком<img src="img/image269.gif" width="25" height="26">на схемах обозначены 
  существующие проведенные документы, которые</p>
<p>находятся за моментом ТА (они не учтены в остатках регистров).</p>
<h4><b>Дата документа меньше ТА</b></h4>
<p>На рисунке приведена схема ситуации, когда документ проводится задним числом, 
  дата документа меньше даты ТА и между документом и ТА существуют ранее проведенные 
  документы.</p>
<p><img src="img/image264.gif" width="476" height="108"></p>
<p>Время документа в 1С:Предприятии служит в основном для расстановки документов 
  в определенном порядке, а не для отражения астрономического времени ввода документа. 
  Поэтому при проведении документа время может быть исправлено. Однако дата документа 
  является его важным реквизитов и не исправляется системой автоматически.</p>
<p>Так как в данном случае дата документа меньше ТА, то система не может обеспечить 
  проведение данного документа в реальном времени. В этом случае система выдает 
  следующее сообщение:</p>
<p> &quot;Дата документа меньше ТА! Провести документ задним числом ?&quot;</p>
<p>Данным сообщением программа предупреждает пользователя, что проведение документа 
  нарушает естественную последовательность ввода документов. Если алгоритм Модуля 
  движения регистров данного документа предусматривает данную ситуацию, например, 
  запускает временный расчет регистров, или для данного документа эта ситуация 
  не является конфликтной (например для выписки приходной накладной не анализирующей 
  текущие остатки регистров), то можно нажимать кнопку &quot;Да&quot;. В противном 
  случае, когда правильность проведения нового документа зависит от временной 
  последовательности проведения документов, следует нажимать кнопку &quot;Нет&quot;. 
  Тогда документ будет записан, но не проведен. В дальнейшем можно будет провести 
  данный документ в режиме группового проведения, используя операцию &quot;Управление 
  итогами&quot;, откатив ТА назад, а затем снова вперед с одновременным перепроведением 
  документов. При групповом проведении документы проводятся последовательно, в 
  естественном временном порядке с получением текущих итогов регистров.</p>
<p>Решение, которое должен принимать пользователь, зависит от конкретной конфигурации 
  и алгоритма проведения конкретного документа. Поэтому мы рекомендуем, по возможности, 
  предусматривать в алгоритмах проведения документов обработку ситуаций проведения 
  документов задним числом или ограничить возможность пользователей проведения 
  документов задним числом.</p>
<h4>После данного документа существуют проведенные документы</h4>
<p>На рисунке приведена схема ситуации, когда документ проводится той же датой, 
  что и дата ТА, но время документа меньше времени ТА и между документом и ТА 
  существуют ранее проведенные документы.</p>
<p><img src="img/image265.gif" width="476" height="108"></p>
<p>В этом случае система выдает следующее сообщение:</p>
<p>&quot;Время документа меньше точки актуальности. Существуют более поздние проведенные 
  документы.&quot;</p>
<p>Пользователю предлагается выбрать один из двух вариантов: </p>
<ul>
  <li>Провести документ задним числом.</li>
  <li>Изменить время документа.</li>
</ul>
<p>Данным сообщением программа предупреждает пользователя, что проведение документа 
  нарушает естественную последовательность ввода документов в пределах одной даты. 
  Пользователю предлагается сделать выбор: или принять решение, чтобы система 
  изменила время документа так, чтобы он стал последним среди проведенных документов, 
  или провести документ без изменения времени, то есть задним числом. По умолчанию 
  предлагается изменить время документа .</p>
<p>Как уже отмечалось, компонента оперативного учета предполагает последовательный 
  ввод и проведение документов, поэтому данный вопрос системы позволяет автоматически 
  перенести документа за точку актуальности в процессе проведения, то есть провести 
  его в актуальном состоянии.</p>
<p>Выбор пользователя в данном случае должен определяться тем, отражает ли данный 
  документ событие, происходящее в данный момент времени, или он отражает событие 
  произошедшее в начале дня (в более раннем времени) и по ошибке не нашедшее отражение 
  в системе.</p>
<p>Наиболее типовым случаем, когда выдается данный вопрос, является ситуация, 
  при которой пользователь записал новый документ, но перед тем как он начал его 
  проводить, другим пользователем был проведен более поздний документ. </p>
<p>Так как событие документа фактически отражается им в регистрах в момент проведения, 
  разумеется, для соблюдения последовательность проведения документов следует 
  выбирать вариант &quot;Изменить время документа&quot;.</p>
<p>Вариант &quot;Провести документ задним числом&quot; следует выбирать в том 
  случае, когда документ умышленно помещен до точки актуальности, и он отражает 
  событие, которое произошло ранее событий отраженных более поздними проведенными 
  документами.</p>
<p>Следует заметить, что параметры системы, настраиваемые пользователем в закладке 
  &quot;Оперативный учет&quot; режима &quot;Параметры&quot;, позволяют установить 
  режим, при котором данный вопрос выдаваться не будет. Проведение документа с 
  переносом его за ТА будет выполняться автоматически при проведении новых документов 
  в текущей дате. Кроме того, существует  возможность установить параметр, который 
  будет автоматически выбирать время записи нового документа более поздним , чем 
  ТА . Это позволит уменьшить вероятность возникновения описанной ситуации, даже 
  при сильных расхождениях таймеров компьютеров пользователей, так как новые документы 
  будут записываться не с текущим временем компьютера, а после ТА.</p>
<p>Кроме того, существует возможность регулировать проведение документов (проводить 
  в реальном времени или задним числом) в модуле формы документа средствами встроенного 
  языка (при использовании метода &quot;Провести&quot;). В этом случае, существует 
  специальная возможность проводить в реальном времени уже проведенный документ. 
  При этом, фактически, обеспечивается перепроведение документа в реальном времени 
  (с переносом его за ТА). Очень важно, что в этом случае и удаление существующих 
  движений и формирование новых выполняется в единой транзакции. Например, в типовой 
  конфигурации &quot;Торговля и склад&quot; (редакция 8) этот механизм используется 
  для предварительного проведения расходной накладной. Фактически, пользователь 
  может несколько раз выполнять проведение документа в текущей дате в реальном 
  времени. Если бы он распроводил документ и проводил заново, то существовала 
  бы вероятность того, что другой пользователь отгрузит &quot;дефицитный&quot; 
  товар и повторное проведение уже не будет выполнено. При перепроведении в реальном  
  времени, другие пользователи не могут &quot;вклиниться&quot; между удалением 
  движений и формированием новых. </p>
<h4>Существуют более ранние проведенные документы</h4>
<p>Приведенная на рисунке схема отражает ситуацию, когда документ проводится после 
  ТА, но между проводимым документом и ТА уже есть ранее проведенные документы.</p>
<p><img src="img/image266.gif" width="476" height="108"></p>
<p>В этом случае система выдает следующее сообщение:</p>
<p>&quot;Существуют более ранние проведенные документы!&quot;</p>
<p>Этим сообщением программа предупреждает пользователя о том, что проведение 
  документа сейчас невозможно, т.к. в данном случае проведение документа должно 
  подразумевать сдвиг ТА вперед с зачислением в регистры движений ранее проведенных 
  документов. Но такой процесс, должен производиться только в режиме &quot;Управления 
  оперативными итогами&quot; или операцией &quot;Установить ТА на документ&quot;. 
  Поэтому в данном случае документ не проводится.</p>
<p>Данная ситуация может произойти только в случае, если ранее был выполнен процесс 
  переноса ТА назад и некоторые проведенные документы оказались после ТА. Так 
  как на практике перенос ТА назад выполняется только в специальных целях и обычно 
  администратором системы, то, очевидно, не следует допускать ситуации, чтобы 
  при начале работы пользователей система находилась в таком состоянии. То есть 
  после переноса ТА назад и выполнения необходимых действий администратору следует 
  либо последовательно провести документы после ТА, либо передвинуть ТА вперед 
  на последний проведенный документ.</p>
<h4>Особенности написания алгоритма проведения оперативного документа</h4>
<p>При написании модуля оперативного документа следует учитывать, что использование 
  текущих итогов регистра в процессе проведения может выполняться только если 
  метод &quot;ИтогиАктуальны&quot; возвращает значение &quot;1&quot;. При этом  
  обращение к текущим итогам может выполняться методами объекта &quot;Регистр&quot; 
  или объектом &quot;Запрос&quot; с периодом без указания конечной границы. </p>
<p>Если метод &quot;ИтогиАктуальны&quot; возвращает &quot;0&quot;, то при использовании 
  объекта &quot;Регистр&quot; следует выполнять временный расчет на текущий документ, 
  а при использовании объекта &quot;Запрос&quot;, следует указывать в качестве 
  конечной границы текущий документ.</p>
<p>Кроме того, при написании алгоритма проведения в некоторых случаях следует 
  учитывать, что проведение может выполняться в процессе группового проведения 
  (метод &quot;ГрупповаяОбработка&quot;). Например, в этом случае, очевидно,  
  не следует выполнять проверку наличия товара на складе и прерывать проведение, 
  если текущее количество товаров не соответствует затребованному, так как документ 
  уже был оформлен и должен быть перепроведен в соответствии с указанными данными. 
  Проверки текущего наличия товаров, обычно, имеют смысл при текущей работе пользователей, 
  чтобы исключить продажу закончившегося товара.</p>
<b><i><br clear=all
style='page-break-before:always'>
</i></b> 
<h2><a name="_Toc503983449">Принципы организации бухгалтерских операций и проводок</a></h2>
<p>При освоении средств конфигурирования 1С:Предприятия одним из частых вопросов, 
  которые требуют дополнительного разъяснения является вопрос об общих принципах 
  организации в системе бухгалтерских операций и проводок. Часто этот вопрос возникает 
  у тех специалистов, которые знакомы с принципами организации  регистров оперативного 
  учета. Действительно, проводки бухгалтерского учета имеют много общего с движениями 
  регистров. Однако, движения регистров подчиняются непосредственно документу, 
  а для проводок существует понятие &quot;Операция&quot;, объединяющая проводки 
  сформированные одним документом. Наличие понятия операции объясняется несколькими 
  причинами, связанными с назначением и практикой использования компоненты &quot;Бухгалтерский 
  учет&quot;.</p>
<p>Очень важным отличием механизма бухгалтерского учета от механизма оперативного 
  учета является то, что механизм операций и проводок наряду с автоматическим 
  формированием проводок документами рассчитан на ведение учета вручную. Это возможно 
  благодаря тому, что сама модель бухгалтерского учета (проводки, двойная запись, 
  счета синтетического учета, аналитика) доступна пользователю (бухгалтеру) и 
  программа может общаться с ним именно в тех категориях, в которых и ведется 
  учет. Для оперативного учета это не так. Пользователь не работает напрямую с 
  регистрами, так как механизм оперативного учета не является &quot;общечеловеческим&quot; 
  понятием, а разработан как специализированное средство 1С:Предприятия. Наличие  
  в метаданных понятия &quot;Операция&quot; позволяет обеспечить, для ведения 
  ручного учета возможность удобного ввода проводок в специализированной форме, 
  которая также как и большинство форм в 1С:Предприятии может быть изменена разработчиком 
  конфигурации.</p>
<p>Заметим, что назначение регистров оперативного учета, может быть самое различное. 
  Каждый регистр представляет собой фактически независимую учетную систему. Иногда 
  один или два регистра  могут быть логически связаны, но в то же время могут 
  использоваться регистры, которые предназначены для отражения некоторого факта 
  хозяйственной жизни в совершенно разных учетных задачах поддерживаемых конфигурацией. 
  Проводки бухгалтерского учета, как правило, относятся к одному плану счетов 
  и являются отражением хозяйственной операции в одной учетной системе описываемой 
  планом счетов.  Таким образом, проводки сформированные документом или введенные 
  вручную в одной операции представляют собой обычно нечто большее, чем просто 
  набор отдельных движений. Понятие &quot;Операция&quot; позволяет объединить 
  все проводки формируемые документом или вводимые вручную. В отличии от движений 
  регистров, которые с помощью соответствующего объекта встроенного языка могут 
  только записываться и считываться по одному движению, все проводки операции 
  считываются при обращении к операции. Затем с ними могут выполняться различные 
  действия, например, можно изменять, добавлять и удалять проводки. Измененная 
  операция записывается целиком.</p>
<p>Пожалуй, одной из самых важных задач операции является возможность вводить 
  для операции реквизиты. Для оперативного учета практически не имели бы смысла, 
  какие либо данные, которые относились бы ко всем документам, записывающим движения 
  регистров. Однако для бухгалтерского учета эта задача вполне актуальна. С точки 
  зрения бухгалтера, все операции (и введенные вручную и сформированные документами) 
  являются равноценными записями, отражающими хозяйственную операцию в бухгалтерском 
  учете. И у этой записи должны быть некоторые данные, характеризующие ее в целом. 
  Наиболее яркими примерами таких данных являются &quot;штатные&quot; реквизиты 
  операции (&quot;Содержание&quot; и &quot;Сумма операции&quot;). Когда бухгалтер 
  работает с отчетами или журналами ему необходима информация, которая не связана 
  с тем, как записана операция (сформирована одним из документов или введена вручную). 
  Введение таких общих данных свойственных бухгалтерским операциям во все документы 
  было бы весьма расточительным, так как во многих конфигурациях далеко не все 
  документы  записывают проводки.</p>
<p>Другой задачей решаемой операциями является отражение всех документов, относящихся 
  к бухгалтерскому учету в журнале операций. Эта задача тесно связана с предыдущей. 
  Она так же помогает представить бухгалтеру все документы с точки зрения их отношения 
  к бухгалтерскому учету. В журнал операций могут не включаться документы, не 
  имеющие отношения к бухгалтерскому учету. При этом в журнале операций обычно 
  не отражается специфическая информация документов, а отражается только та информация, 
  которая единообразно представляет все документы в механизме бухгалтерского учета. 
  Наличие в метаданных объекта &quot;Операция&quot; позволяет определить в конфигурации 
  не только состав данных свойственных всем операциями, но и способ представления 
  операций в журнале.</p>
<h2><a name="_Toc503983450">Запросы</a></h2>
<h3><a name="_Toc503983451">Терминология и обозначения</a></h3>
<p>- &quot;Запрос&quot; - объект метаданных типа &quot;Запрос&quot;;</p>
<p>- Текст запроса - текстовое описание запроса к ИБ на специализированном языке 
  запросов;</p>
<p>- Выборка - набор данных, полученных в результате выполнения запроса;</p>
<p>- Группировка данных - накопление различных значений одного и того же типа 
  данных.</p>
<p>- Отчёт - совокупность текста запроса, процедуры его выполнения и интерпретации 
  выбранных данных.</p>
<h3><a name="_Toc503983452">Введение</a></h3>
<h4><a name="_Toc503983453">С чего начать</a></h4>
<h5><a name="_Toc503983454">Начнем с начала</a></h5>
<p>Для начала, прежде чем проектировать запрос, необходимо задаться вопросом: 
  &quot;Что же я хочу в результате получить?&quot;. Да, да, именно так все и начинается, 
  с тривиальной &quot;постановки задачи&quot;.</p>
<h5><a name="_Toc503983455">Постановка задачи</a></h5>
<p>Предположим, я хочу получить &quot;Данные об оборотах и остатках товаров на 
  складах за какой-то период времени&quot; в виде вот такой таблицы:</p>
<p><img src="img/img010.gif" width="507" height="80"></p>
<h5><a name="_Toc503983456">Формирование текста запроса</a></h5>
<p>Уже изначально, в постановке задачи прозвучали все необходимые данные для построения 
  запроса, такие как: обороты, остатки, товары, склады и период времени . Начнем 
  по порядку:</p>
<p>             1. &quot;... за какой-то период времени&quot;. Значит, мы можем 
  описать период времени, за который запрос будет извлекать информацию. Отразим 
  это:</p>
<p>Период с '98' по '98'</p>
<p>Правды ради, следует отметить, что задание конкретных дат интервала запроса 
  не слишком удобно в большинстве случаев, поэтому создадим в модуле отчета две 
  внешние переменные, определяющие дату начала и конца запроса - ДатаС и ДатаПо 
  :</p>
<p>Период с ДатаС по ДатаПо;</p>
<p>             2. &quot;Данные об оборотах и остатках товаров ...&quot;. Значит, 
  мы хотим видеть перечень товаров. Ну что ж, давайте так и сделаем - объявим 
  переменную запроса - Товар</p>
<p>Товар =</p>
<p>             3. &quot;Данные об оборотах и остатках товаров на складах ...&quot;. 
  Для каждого товара хотим отобразить склад, на котором он хранится. Для этого 
  объявляем переменную Склад :</p>
<p>Склад =</p>
<p>             4. &quot;Данные об оборотах &quot;. Во-первых, необходимо определиться, 
  какие конкретные обороты мы хотим отразить: денежные, количественные. Давайте 
  определим</p>
<p>Количество =</p>
<p>Поскольку нам нужны данные об оборотах, то следует объявить и сами функции 
  накопления:</p>
<p>Приход = Функция Приход(Количество);</p>
<p>Расход = Функция Расход(Количество);</p>
<p>Данные об оборотах можно получить различными способами – из документов, обходя 
  все или определенные виды документов за конкретный период времени, и из регистров.</p>
<p>             5. &quot;Данные об остатках &quot;. Объявим функции остатков:</p>
<p>НачОст = Функция НачОст(Количество);</p>
<p>КонОст = Функция КонОст(Количество);</p>
<p>Данные об остатках из документов уже не получишь, для этой цели предназначены 
  регистры остатков. Следовательно, в работе запроса мы будем использовать регистры. 
  Этот вывод существенно помогает в проектировании запроса, так как мы теперь 
  в состоянии корректно описать переменные, зная, что учет оборотов и остатков 
  ведется по регистру &quot;Товарные запасы&quot;:</p>
<p>Товар = Регистр.ТовЗап.Товар;</p>
<p>Склад = Регистр.ТовЗап.Склад;</p>
<p>Количество = Регистр.ОстаткиТоваров.ОстатокТовара;</p>
<p>             6. Если мы хотим получить перечень товаров, то нам необходимо 
  эти товары группировать, то есть отображать различные виды товаров. Для чего 
  мы заводим группировку по переменной Товар :</p>
<p>Группировка Товар;</p>
<p>             7. Те же самые резоны приводят нас к созданию группировки по переменной 
  Склад :</p>
<p>Группировка Склад;</p>
<p>             8. Теперь соберем полный текст запроса, который можно присвоить 
  какой-нибудь переменной модуля отчёта, скажем, ТекстЗапроса:</p>
<p> ТекстЗапроса =</p>
<p>&quot;Период с ДатаС по ДатаПо</p>
<p>|Товар = Регистр.ТовЗап.Товар;</p>
<p>|Количество = Регистр.ТовЗап.ОстатокТовара;</p>
<p>|Приход = Функция Приход(Количество);</p>
<p>|Расход = Функция Расход(Количество);</p>
<p>|НачОст = Функция НачОст(Количество);</p>
<p>|КонОст = Функция КонОст(Количество);</p>
<p>|Группировка Товар;</p>
<p>|Группировка Склад;</p>
<p>|&quot;//}}ЗАПРОС</p>
<p>;</p>
<p>Получившийся текст запроса - это только часть необходимой работы для получения 
  отчёта, но это как раз та часть, которой мы посвятили эту главу методических 
  рекомендаций.</p>
<h4><a name="_Toc503983457">Что происходит внутри</a></h4>
<h5><a name="_Toc503983458">Как текст запроса превращается в выборку?</a></h5>
<p>После того, как создан агрегатный объект типа &quot;Запрос&quot;:</p>
<p>Запрос = СоздатьОбъект(&quot;Запрос&quot;);</p>
<p>сформулирован текст запроса и присвоен переменной ТекстЗапроса , запрос запускается 
  на выполнение:</p>
<p>Запрос.Выполнить(ТекстЗапроса);</p>
<p>Что же происходит внутри этого метода? Как же там всё устроено?</p>
<p>Попадая в метод Выполнить , текст запроса превращается в выборку путём следующих 
  метаморфоз:</p>
<p>- проверка синтаксиса;</p>
<p>- создание таблицы выборки;</p>
<p>- накопление данных.</p>
<h4><a name="_Toc503983459">Проверка синтаксиса</a></h4>
<h5><a name="_Toc503983460">Правильность написания текста</a></h5>
<p>Сначала проверяется правильность написания самого текста запросов - синтаксическая 
  проверка запроса. Может быть пропущен символ &quot;;&quot;, может быть неверно 
  указан путь переменной запроса, в любом случае ошибки должны быть обнаружены 
  и исправлены.</p>
<p>Для выявления синтаксических ошибок на стадии разработки (ещё при работе в 
  конфигураторе) воспользуйтесь пунктом меню &quot; Действия – Синтаксический 
  контроль запросов... &quot; , выберите  запросы для проверки и нажмите кнопку 
  OK.</p>
<p>Поскольку речь зашла о синтаксисе, обсудим его мало освещенные аспекты.</p>
<h5><a name="_Toc503983461">Объявление внутренних переменных запроса</a></h5>
<p>достаточно подробно описано в книге &quot;Описание встроенного языка. Часть 
  2&quot;. Но хотелось бы ещё раз обратить внимание на то, что описание переменной 
  обуславливает характер обхода ИБ для формирования выборки. Мы можем описать 
  переменную Товар различными способами:</p>
<p>       Товар = Справочник.Товар.ТекущийЭлемент;</p>
<p> или</p>
<p>       Товар = Документ.РасходнаяНал.Товар;</p>
<p>или</p>
<p>       Товар = Регистр.ОстаткиТоваров.Товар;</p>
<p> и во всех трех случаях запрос будет вести себя по-разному. В первом случае 
  запрос пройдет по всем элементам справочника Товар и выдаст полный его перечень. 
  Во втором случае запрос пройдет по документам типа РасходнаяНал и выберет только 
  те товары, которые были проданы по этим документам. А в третьем случае запрос 
  пройдет по движениям или по остаткам регистра (в зависимости от того, какие 
  функции были применены в запросе) и соберет те товары, которые участвовали в 
  этих движениях или присутствовали в остатках.</p>
<p>Если переменную описывают путем с более чем одной ссылкой на объект типа справочник, 
  документ, план счетов и т.д., то говорят, что переменная описана ДЛИННЫМ ПУТЕМ, 
  например</p>
<p>       Валюта = Регистр.ОстаткиТоваров.Товар.ВалютаРаботы;</p>
<p>       Адрес = Документ.РасходнаяНал.Клиент.Адрес;</p>
<p>Так же хотелось обратить внимание на следующие особенности синтаксиса. При 
  работе с регистрами имеется возможность обращения не только к документу, вызвавшему 
  движение регистра:</p>
<p>       Док = Регистр.ИмяРегистра.ТекущийДокумент;</p>
<p> но и к общим реквизитам документов:</p>
<p>        Реквизит = Регистр.ИмяРегистра.ТекущийДокумент. ИмяРеквизита;</p>
<p> и к самим полям документов. Но для этого необходимо указать, из каких типов 
  документов необходимо выбирать значения:</p>
<p>        Поле = Регистр.ИмяРегистра.ТекущийДокумент. ИмяДокумента.ИмяПоля;</p>
<p> При описании поля документа нельзя не указывать имени самого документа, даже 
  если такое поле встречается в каждом документе конфигурации. Для решения этой 
  проблемы нужно либо объявить поле общим реквизитом документов, либо перечислить 
  в описании переменной все необходимые типы документов:</p>
<p>        Поле = Регистр.ИмяРегистра.ТекущийДокумент.</p>
<p>ИмяДокумента1.ИмяПоля,</p>
<p>Регистр.ИмяРегистра.ТекущийДокумент. ИмяДокументаN.ИмяПоля;</p>
<p>Для ИБ в формате .DBF не следует злоупотреблять длинными путями, так как это 
  увеличивает время формирования выборки, ведь запросу приходится считывать не 
  только реквизит указанного документа или регистра, но и по ссылке на объект 
  считывать сам этот объект для извлечения данных. Что нельзя сказать о ИБ в формате 
  SQL. Объект Запрос формирует запрос к SQL серверу, и чем больше работы будет 
  переложено на плечи SQL сервера, тем быстрее будет формироваться выборка.</p>
<h5><a name="_Toc503983462">Оператор Период С</a></h5>
<p>задает временной интервал выборки данных. Параметрами этого предложения могут 
  быть:</p>
<p>- Дата - в формате встроенного языка '64', '1995'.</p>
<p> Внешняя переменная - глобальная переменная модуля отчёта или идентификатор 
  элемента управления формы отчёта типа Дата или Документ . Если переменная - 
  типа Документ , то интервал запроса устанавливается на дату и время указанного 
  документа.</p>
<p>- Выражение встроенного языка. Задается в круглых или фигурных скобках и может 
  иметь тип, как Дата, так и Документ, например:</p>
<p>Период с (ДатаС + 1) по (ПолучитьДокументТА());.</p>
<h5><a name="_Toc503983463">Оператор Условие</a></h5>
<p>Задаёт условие включения данных в выборку. Для оптимизации времени выполнения 
  запроса следует знать, что в 1С:Предприятии версии 7.7 запрос сам выполняет, 
  а не вызывает для этого исполнительную среду встроенного языка, условия вида:</p>
<p>        ЛеваяЧастьУсловия знакСравнения ПраваяЧастьУсловия </p>
<p>где,</p>
<p>        ЛеваяЧастьУсловия и ПраваяЧастьУсловия могут быть константой, переменной 
  запроса или внешней переменной;</p>
<p>        знакСравнения - логический оператор (&quot;&gt;&quot;, &quot;&lt;&quot;, 
  &quot;=&quot;, &quot;&lt;&gt;&quot;, &quot;&gt;=&quot;, &quot;&lt;=&quot;, &quot;в&quot;, 
  &quot;in&quot;).</p>
<p>Ниже приведен пример запроса с элементарными условиями:</p>
<p>&quot;//{{Запрос(ЭлементарноеУсловие)</p>
<p>|Период с ДатаС по ДатаПо;</p>
<p>|Товар = Документ.ПриходнаяНал.Товар;</p>
<p>|Дата = Документ.ПриходнаяНал.ДатаДок;</p>
<p>|КолВо = Документ.ПриходнаяНал.Количество;</p>
<p>|Группировка Товар упорядочить по Товар.Наименование;</p>
<p>|Условие(Дата &lt;&gt; ИсключитьДату);</p>
<p>|Условие(Товар = ВыбранныйТовар);</p>
<p>|Условие(КолВо &gt;= 43);</p>
<p>|Условие((Дата &lt;&gt; ИсключитьДату) ИЛИ (КолВо &gt;= 43))</p>
<p>&quot;//}}</p>
<p>;</p>
<p>Следует обратить внимание на то, что отдельные условия в</p>
<p>запросе объединяются по &quot;И&quot;, то есть запросы</p>
<p>Условие(ВыходнойДень(Дата) = 0);</p>
<p>Условие(Товар в ВыбранныйТовар);</p>
<p>и</p>
<p>Условие((ВыходнойДень(Дата) = 0) И (Товар в ВыбранныйТовар)</p>
<p>= 1));</p>
<p>будут выполняться одинаково.</p>
<p>Если условие не подходит под определение элементарного, то оно выполняется 
  механизмом внутреннего языка системы 1С:Предприятие.</p>
<p>Если существует возможность разбить сложное условие на элементарные, то так 
  и следует поступить. Допустим, что нам необходимо применить условие вида:</p>
<p>&quot;//{{Запрос(ПреобразованиеУсловия_Было)</p>
<p>|//...</p>
<p>|Условие(Флаг = Перечисление.Булево.Да);</p>
<p>|//...</p>
<p>&quot;//}}</p>
<p>;</p>
<p>, то для оптимизации времени исполнения запроса следует, объявить глобальную 
  переменную:</p>
<p>Перем True;</p>
<p>а в конце модуля определить её как</p>
<p>True = Перечисление.Булево.Да;</p>
<p>и применить эту переменную для формирования элементарного условия:</p>
<p>&quot;//{{Запрос(ПреобразованиеУсловия_Стало)</p>
<p>|//...</p>
<p>|Условие(Флаг = True);</p>
<p>|//...</p>
<p>&quot;//}}</p>
<p>;</p>
<p>Следует обратить особое внимание на то, что оператор принадлежности (в/in), 
  не поддерживается внутренним языком 1С:Предприятия, поэтому оператор принадлежности 
  должен использоваться только в элементарных условиях вычисляемых самим Запросом. 
  И поэтому следующий пример будет выдавать ошибки при выполнении запроса:</p>
<p>&quot;//{{ЗАПРОС(ОшибкаОператораПринадлежности)</p>
<p>|//...</p>
<p>|Условие(Товар.Код в ВыбТовар.Код);</p>
<p>|//...</p>
<p>&quot;//}}</p>
<p>;</p>
<h5><a name="_Toc503983464">Оператор Группировка</a></h5>
<p>в 1С:Предприятии версии 7.5 обогатился следующими реквизитами Все  и Все ВошедшиеВЗапрос 
  . Эти реквизиты созданы для того, чтобы давать возможность создавать табличные 
  отчёты, разворачиваемые по горизонтали и вертикали. Для иллюстрации вышесказанного, 
  обратимся к классике - отчёту &quot;Остатки товаров на складах&quot;.</p>
<p>Далее приведен текст процедуры программного модуля, реализующего формирование 
  отчёта:</p>
<p>//*******************************************</p>
<p>// Процедура формирования отчета//</p>
<p>Процедура ПоСкладам()</p>
<p>  Перем Запрос, ТекстЗапроса, Таблица;</p>
<p>  //Создание объекта типа Запрос</p>
<p>  Запрос = СоздатьОбъект(&quot;Запрос&quot;);</p>
<p>  ТекстЗапроса =</p>
<p>  &quot;//{{ЗАПРОС(ПоСкладам)</p>
<p>  |Скл   = Регистр.ОстаткиТоваров.Склад;</p>
<p>  |Товар = Регистр.ОстаткиТоваров.Товар;</p>
<p>  |КолВо = Регистр.ОстаткиТоваров.ОстатокТовара;</p>
<p>  |Группировка Товар Упорядочить По Товар.Код;</p>
<p>  |Группировка Скл Упорядочить По Скл.Код Все;</p>
<p>  |Функция КО = КонОст(КолВо);</p>
<p>  |&quot;//}}ЗАПРОС</p>
<p>  ;</p>
<p>  // Если ошибка в запросе, то выход из процедуры</p>
<p>  Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда</p>
<p>    Возврат;</p>
<p>  КонецЕсли;</p>
<p>  // Подготовка к заполнению отчета данными запроса</p>
<p>  Таблица=СоздатьОбъект(&quot;Таблица&quot;);</p>
<p>  Таблица.ИсходнаяТаблица(&quot;ПоСкладам&quot;);</p>
<p>  Таблица.ВывестиСекцию(&quot;Заголовок&quot;);</p>
<p>  // Формирование шапки отчета</p>
<p>  Таблица.ВывестиСекцию(&quot;Шапка|Боковик&quot;);</p>
<p>  Счётчик = 0;</p>
<p>  Пока Запрос.Группировка(&quot;Товар&quot;) = 1 Цикл</p>
<p>    Пока Запрос.Группировка(&quot;Скл&quot;) = 1 Цикл</p>
<p>      Таблица.ПрисоединитьСекцию(&quot;Шапка|Склад&quot;);</p>
<p>      Счётчик = Счётчик + 1;</p>
<p>    КонецЦикла;</p>
<p>    Если Счётчик&gt;0 Тогда</p>
<p>        прервать;</p>
<p>    КонецЕсли;</p>
<p>  КонецЦикла;</p>
<p>  Запрос.ВНачалоВыборки();</p>
<p>  // Процесс формирования строки отчета</p>
<p>  Пока Запрос.Группировка(&quot;Товар&quot;) = 1 Цикл</p>
<p>    Если Запрос.ЭтоГруппа(1) = 1 Тогда</p>
<p>      Таблица.ВывестиСекцию(&quot;Группа|Боковик&quot;);</p>
<p>      Для i = 1 по Счётчик Цикл</p>
<p>        КоличествоДляТаблицы = 0;</p>
<p>        Таблица.ПрисоединитьСекцию(&quot;Группа|Склад&quot;);</p>
<p>      КонецЦикла;</p>
<p>    Иначе</p>
<p>      Таблица.ВывестиСекцию(&quot;Товар|Боковик&quot;);</p>
<p>      Пока Запрос.Группировка(&quot;Скл&quot;) = 1 Цикл</p>
<p>        КоличествоДляТаблицы = Запрос.КО;</p>
<p>        Таблица.ПрисоединитьСекцию(&quot;Товар|Склад&quot;);</p>
<p>      КонецЦикла;</p>
<p>    КонецЕсли;</p>
<p>  КонецЦикла;</p>
<p>  // Вывод заполненной формы отчета</p>
<p>  Таблица.ТолькоПросмотр(1);</p>
<p>  Таблица.Опции(0,0,5,0);</p>
<p>  Таблица.Показать(&quot;Остатки товаров на складах&quot;,&quot;&quot;);</p>
<p>КонецПроцедуры</p>
<p>Выходная таблица отчёта имеет следующий вид:</p>
<p>                 Остатки товаров на складах</p>
<p><img src="img/img011.gif" width="441" height="223"></p>
<p>Следует упомянуть тот факт, что &quot;Запрос&quot; дает возможность доступа 
  к переменным, группировкам и функциям по их именам. Значения упорядочивания 
  хоть и находятся в выборке, но у их нет имени и следовательно, доступ к их значениям 
  по имени невозможен. Для доступа к их значениям применяется метод ЗначениеУпорядочивания. 
  Использование этого метода, может существенно ускорить время обхода выборки, 
  по сравнению с использованием конструкций типа:</p>
<p>Запрос.ИмяГруппировки.ИмяПоля</p>
<p>из-за того, что значение ИмяПоля, система будет повторно выбирать из ИБ.</p>
<p>В 1С:Предприятии версии 7.7 появились новоые возможности по упорядочиванию 
  группировок. Первая, это возможность упорядочивать значение группировки по функции. 
  вторая, возможность новый реквизит предложения Группировка – без упорядочивания 
  . Реквизит без упорядочивания удобен для пакетного режима выполнения запроса, 
  когда не важно расположение элементов группировки, а необходимы только результаты. 
  В этом случае сбор данных упорядочивания отключается полностью, в том числе 
  и по умолчанию, что положительно сказывается на производительности.</p>
<h5><a name="_Toc503983465">Оператор Функция</a></h5>
<p>В этом разделе хочется обратить внимание на то, что значения функций, объявленных 
  в запросе, определены, накапливаются и сворачиваются по всем уровням группировок, 
  начиная с самой старшей группировки - &quot;Итого&quot; и кончая самой младшей. 
  Как иллюстрацию, приведем следующий пример:</p>
<p>Процедура ОстаткиТоваров()</p>
<p>  Перем Запрос, ТекстЗапроса, Таб;</p>
<p>  //Создание объекта типа Запрос</p>
<p>  Запрос = СоздатьОбъект(&quot;Запрос&quot;);</p>
<p>  ТекстЗапроса =</p>
<p>  &quot;//{{ЗАПРОС(ОстаткиТоваров)</p>
<p>  |Период с ДатаС по ДатаПо;</p>
<p>  |Товар = Регистр.ОстаткиТоваров.Товар;</p>
<p>  |Склад = Регистр.ОстаткиТоваров.Склад;</p>
<p>  |КолВо = Регистр.ОстаткиТоваров.ОстатокТовара;</p>
<p>  |Группировка Товар упорядочить по</p>
<p>  |            Товар.Наименование;</p>
<p>  |Группировка Склад упорядочить по</p>
<p>  |            Склад.Наименование;</p>
<p>  |Функция Количество = КонОст(КолВо);</p>
<p>  |&quot;//}}ЗАПРОС</p>
<p>  ;</p>
<p>  // Если ошибка в запросе, то выход из процедуры</p>
<p>  Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда</p>
<p>    Возврат;</p>
<p>  КонецЕсли;</p>
<p>  // Подготовка к заполнению выходных форм данными</p>
<p>  Таб = СоздатьОбъект(&quot;Таблица&quot;);</p>
<p>  Таб.ИсходнаяТаблица(&quot;ОстаткиТоваров&quot;);</p>
<p>  // Заполнение полей &quot;Заголовок&quot;</p>
<p>  Таб.ВывестиСекцию(&quot;Заголовок&quot;);</p>
<p>  Состояние(&quot;Заполнение выходной таблицы...&quot;);</p>
<p>  Пока Запрос.Группировка(&quot;Товар&quot;) = 1 Цикл</p>
<p>    // Заполнение полей Товар</p>
<p>    Таб.ВывестиСекцию(&quot;Товар&quot;);</p>
<p>    Пока Запрос.Группировка(&quot;Склад&quot;) = 1 Цикл</p>
<p>      // Заполнение полей Склад</p>
<p>      Таб.ВывестиСекцию(&quot;Склад&quot;);</p>
<p>    КонецЦикла;</p>
<p>  КонецЦикла;</p>
<p>  // Заполнение полей &quot;Итого&quot;</p>
<p>  Таб.ВывестиСекцию(&quot;Итого&quot;);</p>
<p>  // Вывод заполненной формы</p>
<p>  Таб.Опции(1, 0, 1, 0);</p>
<p>  Таб.Показать(&quot;ОстаткиТоваров&quot;, &quot;&quot;);</p>
<p>КонецПроцедуры</p>
<p>В результирующей таблице мы видим, что значение функции определено для Результирующей 
  записи - &quot;Итого&quot;, для группы справочника Товары, для элемента справочника 
  Товары, для элемента справочника Склад. То есть, значение функции определено 
  на всех уровнях вложенности.</p>
<p><img src="img/img012.gif" width="479" height="322"></p>
<h4><a name="_Toc503983466">Создание таблицы выборки</a></h4>
<h5><a name="_Toc503983467">Формат хранения временных файлов</a></h5>
<p>Запрос создает временные файлы для накопления и хранения выборки на компьютере, 
  с которого этот запрос запустили. Формат хранения временных файлов .DBF - .CDX.</p>
<h5><a name="_Toc503983468">Структура записи таблицы выборки</a></h5>
<p>Структура записи таблицы выборки следующая:</p>
<p>- Поля группировок . Поля группировок идут последовательно в порядке их объявления 
  в тексте запроса, и этот порядок крайне важен. Поле группировки состоит из полей 
  упорядочивания и поля значения. По полям упорядочивания и полям значения строятся 
  индексы, и следует иметь в виду, что максимальная длина ключа .CDX .файла равна 
  240 байтам. Если вы заводите большое количество группировок или большое число 
  полей упорядочивания – достичь этой величины не составляет труда. При превышении 
  максимально допустимого значения механизм запросов пропорционально уменьшает 
  длину строковых полей упорядочивания, входящих в ключ. Если же длина ключа превышает 
  240 байт, а возможность сократить её за счёт строковых полей отсутствует, то 
  обработка запроса прекратится с ошибкой &quot;Длина индекса превышает максимальную 
  длину и не может быть уменьшена&quot;.</p>
<p>- Поля функций накопления . Это самые обыкновенные числовые поля с максимальной 
  длиной. Эти поля не входят в индексы.</p>
<p>- Поля внутренних переменных запроса , по которым не велись ни группировки, 
  ни накопление. Такие переменные нужны для выборки данных из объектов группировки, 
  по которым не нужно вести ни группировку, ни упорядочивание, а значение необходимо.</p>
<h4>                     <a
name="_Toc503983469">Накопление данных</a></h4>
<p>После того, как мы узнали, что представляет собой запись таблицы выборки, мы 
  наконец-то можем поговорить о  том, как накапливаются данные, подчёркиваю, именно,накапливаются 
  . Как говорилось выше, обход ИБ запросом зависит от определения путей переменных. 
  Если переменная Товар в тексте запроса определена следующим образом:</p>
<p>       Период с ДатаС по ДатаПо;</p>
<p>       Товар = Документ.РасходнаяНал.Товар,</p>
<p>               Документ.РасходнаяКредит.Товар;</p>
<p>       Склад = Документ.РасходнаяНал.Склад,</p>
<p>               Документ.РасходнаяКредит. Склад;</p>
<p>       КолВо = Документ.РасходнаяНал.Количество,</p>
<p>               Документ.РасходнаяКредит. Количество</p>
<p>       Группировка Товар;</p>
<p>       Группировка Склад;</p>
<p>       Сумма = Функция Сумма(КолВо);</p>
<p>то запрос сначала обойдет все документы вида РасходнаяНал за указанный период, 
  а затем - все документы вида РасходнаяКредит . И каждый раз запрос будет формировать 
  запись, заполняя поля группировок, функций и внутренних переменных. После формирования 
  записи, запрос будет добавлять её в таблицу выборки. Если полученного сочетания 
  значений группировок нет, запрос добавляет запись в таблицу выборки:</p>
<p><img src="img/img014.gif" width="443" height="101"></p>
<p>а если такое сочетание значений группировок существует, то запись накапливается 
  :</p>
<p><img src="img/img015.gif" width="503" height="192"></p>
<p>Если в записи не заполнено какое-либо поле группировок, то запись не считается 
  сформированной, не записывается и не участвует в накоплении значений.</p>
<h3><a name="_Toc503983470">Использование граф отбора</a></h3>
<p>Использование граф отбора может существенно убыстрить время формирования запроса, 
  но для того, чтобы воспользоваться графами отбора, запрос должен удовлетворять 
  следующим требованиям:</p>
<p>- в запросе должна быть объявлена переменная, пути которой включены в графу 
  отбора;</p>
<p>- должно быть задано элементарное условие;</p>
<p>- условие должно быть со знаком сравнение &quot;=&quot;.</p>
<p>Товар = Регистр.ИмяРегистра.Поле;</p>
<p>Условие(Товар = ВыбТовар);   // (+)</p>
<p>Условие(Товар &lt;&gt; ВыбТовар);  // (-) не знак =</p>
<p>Условие((Товар) = ВыбТовар); // (-) не элементарное</p>
<p>                             //     условие</p>
<p>где ВыбТовар - внешняя переменная запроса.</p>
<p>У объекта метаданных типа &quot;Запрос&quot; существует метод ИспользоватьГрафуОтбора 
  , который может управлять механизмом выборки данных с использованием графы отбора.</p>
<p>Параметр метода ИспользоватьГрафуОтбора может принимать следующие значения:</p>
<p>&quot;*&quot; - автоматический выбор графы отбора. Если в тексте запроса описаны 
  элементарные условия со знаком &quot;равно&quot;, то запрос просматривает переменную, 
  фигурирующую в условии, и пытается найти для неё соответствующую графу отбора, 
  и, если такая переменная найдена, то включается механизм выборки данных с использованием 
  графы отбора. Когда в тексте запроса объявлены несколько условий, удовлетворяющих 
  критериям включения механизма выборки данных с использованием графы отбора, 
  перед запросом встает задача выбора одной единственной графы отбора из списка 
  возможных. Запрос в своих оценках выбора графы отбора ориентируется на количество 
  элементов справочников и перечислений. Для других типов оценка не производится, 
  и, при желании, можно задать графу отбора вручную.</p>
<p>имя графы отбора . Графа отбора задаётся вручную. Если она задана неверно, 
  то тогда при выполнении запроса выведется сообщение: &quot;Нет переменной, удовлетворяющей 
  заданной графе отбора&quot;.</p>
<p>&quot; &quot; - отказ от использования графы отбора.</p>
<h3><a name="_Toc503983471">Особенности использования запросов</a></h3>
<p>Метод Выполнить может быть применен к объекту &quot;Запрос&quot; неограниченное 
  количество раз. Приведем тому пример:</p>
<p>Процедура Сформировать()</p>
<p>  Перем Запрос, ТекстЗапроса, Таб;</p>
<p>  Запрос = СозадтьОбъект(&quot;Запрос&quot;);</p>
<p>  ТекстЗапроса =</p>
<p>  &quot;//{{ЗАПРОС(ТекстЗапроса1)</p>
<p>  |...</p>
<p>  &quot;//}}ЗАПРОС</p>
<p>  ;</p>
<p>  Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда</p>
<p>    Возврат;</p>
<p>  КонецЕсли;</p>
<p>  // Цикл обработки запроса</p>
<p>  ...</p>
<p>  &quot;//{{ЗАПРОС(ТекстЗапроса2)</p>
<p>  |...</p>
<p>  &quot;//}}ЗАПРОС</p>
<p>  ;</p>
<p>  Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда</p>
<p>    Возврат;</p>
<p>  КонецЕсли;</p>
<p>  // Цикл обработки запроса</p>
<p>КонецПроцедуры</p>
<p>При повторном вызове метода Выполнить , объект Запрос инициализирует внутренние 
  структуры, и доступ к переменным, объявленным в предыдущем запросе и выбранным 
  данным становится, не возможен.</p>
<p>Особенности позиционирования &gt;. После формирования выборки, запрос позиционируется 
  на первую запись (&quot;Итого&quot;) – в начало выборки, с которой начинается 
  обход выбранных значений. Вернуться в начало выборки, можно двумя способами. 
  В цикле обхода пройти всю выборку до конца;</p>
<p>// Формирование шапки отчета</p>
<p>  Таблица.ВывестиСекцию(&quot;Шапка|Боковик&quot;);</p>
<p>  Счётчик = 0;</p>
<p>  Пока Запрос.Группировка(&quot;Товар&quot;) = 1 Цикл</p>
<p>    Если Счётчик = 0 Тогда</p>
<p>      Пока Запрос.Группировка(&quot;Скл&quot;) = 1 Цикл</p>
<p>        Таблица.ПрисоединитьСекцию(&quot;Шапка|Склад&quot;);</p>
<p>        Счётчик = Счётчик + 1;</p>
<p>      КонецЦикла;</p>
<p>    КонецЕсли;</p>
<p>  КонецЦикла;</p>
<p>  // Процесс формирования строки отчета</p>
<p>  Пока Запрос.Группировка(&quot;Товар&quot;) = 1 Цикл</p>
<p>    Если Запрос.ЭтоГруппа(1) = 1 Тогда</p>
<p>      Таблица.ВывестиСекцию(&quot;Группа|Боковик&quot;);</p>
<p>      Для i = 1 по Счётчик Цикл</p>
<p>        КоличествоДляТаблицы = 0;</p>
<p>        Таблица.ПрисоединитьСекцию(&quot;Группа|Склад&quot;);</p>
<p>      КонецЦикла;</p>
<p>    Иначе</p>
<p>      Таблица.ВывестиСекцию(&quot;Товар|Боковик&quot;);</p>
<p>      Пока Запрос.Группировка(&quot;Скл&quot;) = 1 Цикл</p>
<p>        КоличествоДляТаблицы = Запрос.КО;</p>
<p>        Таблица.ПрисоединитьСекцию(&quot;Товар|Склад&quot;);</p>
<p>      КонецЦикла;</p>
<p>    КонецЕсли;</p>
<p>  КонецЦикла;</p>
<p>или воспользоваться методом &quot;Запроса&quot; - ВначалоВыборки:</p>
<p>Таблица.ВывестиСекцию(&quot;Шапка|Боковик&quot;);</p>
<p>  Счётчик = 0;</p>
<p>  Пока Запрос.Группировка(&quot;Товар&quot;) = 1 Цикл</p>
<p>    Пока Запрос.Группировка(&quot;Скл&quot;) = 1 Цикл</p>
<p>      Таблица.ПрисоединитьСекцию(&quot;Шапка|Склад&quot;);</p>
<p>      Счётчик = Счётчик + 1;</p>
<p>    КонецЦикла;</p>
<p>    Если Счётчик &gt; 0 Тогда</p>
<p>        прервать;</p>
<p>    КонецЕсли;</p>
<p>  КонецЦикла;</p>
<p>  Запрос.ВНачалоВыборки();</p>
<p>  // Процесс формирования строки отчета</p>
<p>  Пока Запрос.Группировка(&quot;Товар&quot;) = 1 Цикл</p>
<p>    Если Запрос.ЭтоГруппа(1) = 1 Тогда</p>
<p>      Таблица.ВывестиСекцию(&quot;Группа|Боковик&quot;);</p>
<p>      Для i = 1 по Счётчик Цикл</p>
<p>        КоличествоДляТаблицы = 0;</p>
<p>        Таблица.ПрисоединитьСекцию(&quot;Группа|Склад&quot;);</p>
<p>      КонецЦикла;</p>
<p>    Иначе</p>
<p>      Таблица.ВывестиСекцию(&quot;Товар|Боковик&quot;);</p>
<p>      Пока Запрос.Группировка(&quot;Скл&quot;) = 1 Цикл</p>
<p>        КоличествоДляТаблицы = Запрос.КО;</p>
<p>        Таблица.ПрисоединитьСекцию(&quot;Товар|Склад&quot;);</p>
<p>      КонецЦикла;</p>
<p>    КонецЕсли;</p>
<p>  КонецЦикла;</p>
<p>Метод ВначалоВыборки можно вызывать на любом уровне вложенности циклов обработки 
  выборки, для перехода в ее начало. Количество обходов выборки ничем не ограничено.</p>
<h3><a name="_Toc503983472">Методы оптимизации запросов</a></h3>
<h4><a name="_Toc503983473">Общие положения написания запросов</a></h4>
<p>Примером неправильной работы с данными в 1С:Предприятиии, есть и остается избыточное 
  обращение к базе данных, вне зависимости от того, в каком формате она хранится.</p>
<p>Как избежать лишних обращений к ИБ, и тем самым существенно уменьшить время 
  формирования отчета проиллюстрируем на примере &quot;Оптимизация Отчета&quot;.</p>
<p>Закладка 100%</p>
<p>       ТекстЗапроса =</p>
<p>       &quot;//{{ЗАПРОС(Сформировать100)</p>
<p>       |Период с ВыбНачПериода по ВыбКонПериода;</p>
<p>       |Товар = Документ.РасхНакл.Товар;</p>
<p>       |Количество = Документ.РасхНакл.Количество;</p>
<p>       |Функция КоличествоСумма = Сумма(Количество);</p>
<p>       |Группировка Товар;</p>
<p>       |Условие(Товар в ВыбТовар);</p>
<p>       |Условие(Товар.ВидТовара = ВыбВидТовара);</p>
<p>       |&quot;//}}ЗАПРОС</p>
<p>       ;</p>
<p>При написании текста запроса необходимо учитывать, что Запрос при формировании 
  выборки сам отрабатывает только элементарные условия , не запуская при этом 
  исполнительную среду встроенного языка, что значительно экономит время. Если 
  есть возможность привести условие к элементарному - это необходимо сделать.</p>
<p>       &quot;//{{ЗАПРОС(Сформировать15)</p>
<p>       |Период с ВыбНачПериода по ВыбКонПериода;</p>
<p>       |Товар = Документ.РасхНакл.Товар;</p>
<p>       |ВидТовара = Документ.РасхНакл.Товар.ВидТовара;</p>
<p>       |Количество = Документ.РасхНакл.Количество;</p>
<p>       |Функция КоличествоСумма = Сумма(Количество);</p>
<p>       |Группировка Товар;</p>
<p>       |Условие(Товар в ВыбТовар);</p>
<p>       |Условие(ВидТовара=ВыбВидТовара);</p>
<p>       |&quot;//}}ЗАПРОС</p>
<p>       ;</p>
<p>Так как выборка формируется на компьютере пользователя, то все данные, которые 
  необходимы пользователю для построения отчета, должны быть, по возможности, 
  получены посредством запроса. В таблице выводится значение кода товара – для 
  этого в запросе необходимо ввести переменную КодТовара . Тогда для формирования 
  отчета, отпадет необходимость, каждый раз обращаться к ИБ. Следует не забывать 
  про методы Запроса - ЗначениеУпорядочивания и ЭтоГруппа , которые опять же извлекают 
  данные из выборки, минуя ИБ, что заметно уменьшает время формирования запроса.</p>
<p>       &quot;//{{ЗАПРОС(Сформировать3)</p>
<p>       |Период с ВыбНачПериода по ВыбКонПериода;</p>
<p>       |Товар = Документ.РасхНакл.Товар;</p>
<p>       |ВидТовара = Документ.РасхНакл.Товар.ВидТовара;</p>
<p>       |КодТовара = Документ.РасхНакл.Товар.Код;</p>
<p>       |Количество = Документ.РасхНакл.Количество;</p>
<p>       |Функция КоличествоСумма = Сумма(Количество);</p>
<p>       |Группировка Товар;</p>
<p>       |Условие(Товар в ВыбТовар);</p>
<p>       |Условие(ВидТовара=ВыбВидТовара);</p>
<p>       |&quot;//}}ЗАПРОС</p>
<p>       ;</p>
<p>В отчете &quot;Оптимизация Отчета&quot; время выполнение самой медленной версии 
  взято за 100%, остальные версии берутся как процент от нее. Следование правилам, 
  дало возможность уменьшить время выполнения запроса почти на 2 порядка!</p>
<h3><a name="_Toc503983474">Особенности использования запросов для получения информации 
  из справочников</a></h3>
<p>В случае применения объекта &quot;Запрос&quot; для выборки информации из справочников 
  1С:Предприятия необходимо учитывать следующую особенность. При обработке справочника 
  объект &quot;Запрос&quot; не обрабатывает группы справочника. То есть он не 
  использует их в качестве исходных данных для получения первичной выборки. При 
  обработке уже полученных записей запрос добавляет группы для выбранных записей 
  - элементов, если существует группировка по переменной запроса типа &quot;Справочник&quot;. 
  Такой способ обработки является стандартным, и Запрос выполняет ее так же, как 
  он это делает, например, для реквизитов документа имеющих тип &quot;Справочник&quot;. 
  То есть, если в запросе по документам использовать группировку по реквизиту 
  &quot;Товар&quot; документа &quot;Счет&quot;, то в полученном отчете можно получить 
  записи и по группам товаров, вошедших в запрос. Аналогично, если в запросе по 
  справочнику получать в качестве группировки текущий элемент, то в полученный 
  отчет будут включены записи, соответствующие группам отобранных запросом элементов. 
  Однако так как сами группы не обрабатываются запросом при заполнении таблицы 
  выборки, то в отчет не попадут те группы, которые не имеют элементов, или группы, 
  элементы которых не попали в выборку. Соответственно объект &quot;Запрос&quot; 
  не может применяться в тех случаях, когда нужно обрабатывать собственно группы, 
  или получать все элементы, включая группы. С другой стороны, так как в большинстве 
  случаев должны выбираться непосредственно элементы, запрос может быть успешно 
  применен для обработки справочника. В том числе, Запрос позволяет существенно 
  ускорить выборку элементов по условию, при работе с базой данных в формате SQL.</p>
<p>При обработке с помощью запроса справочников, имеющих периодические реквизиты, 
  следует учитывать, что значения периодических реквизитов выбираются только  
  на конечную границу периода запроса. То есть, с помощью запроса нет возможности 
  получить историю периодических реквизитов, а можно получить только срез значений 
  на определенный момент.<o:p></o:p></p>
</body>
</html>